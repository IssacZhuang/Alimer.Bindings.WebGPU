// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;

namespace Alimer.Bindings.WebGPU;

unsafe partial class WebGPU
{
	private static delegate* unmanaged<WGPUInstanceDescriptor*, WGPUInstance> wgpuCreateInstance_ptr;
	public static WGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor* descriptor)
	{
		return wgpuCreateInstance_ptr(descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, sbyte*, WGPUProc> wgpuGetProcAddress_ptr;
	public static WGPUProc wgpuGetProcAddress(WGPUDevice device, sbyte* procName)
	{
		return wgpuGetProcAddress_ptr(device, procName);
	}

	private static delegate* unmanaged<WGPUAdapter, WGPUFeatureName*, nuint> wgpuAdapterEnumerateFeatures_ptr;
	public static nuint wgpuAdapterEnumerateFeatures(WGPUAdapter adapter, WGPUFeatureName* features)
	{
		return wgpuAdapterEnumerateFeatures_ptr(adapter, features);
	}

	private static delegate* unmanaged<WGPUAdapter, WGPUSupportedLimits*, bool> wgpuAdapterGetLimits_ptr;
	public static bool wgpuAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits* limits)
	{
		return wgpuAdapterGetLimits_ptr(adapter, limits);
	}

	private static delegate* unmanaged<WGPUAdapter, WGPUAdapterProperties*, void> wgpuAdapterGetProperties_ptr;
	public static void wgpuAdapterGetProperties(WGPUAdapter adapter, WGPUAdapterProperties* properties)
	{
		wgpuAdapterGetProperties_ptr(adapter, properties);
	}

	private static delegate* unmanaged<WGPUAdapter, WGPUFeatureName, bool> wgpuAdapterHasFeature_ptr;
	public static bool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature)
	{
		return wgpuAdapterHasFeature_ptr(adapter, feature);
	}

	private static delegate* unmanaged<WGPUAdapter, WGPUDeviceDescriptor*, WGPURequestDeviceCallback, void*, void> wgpuAdapterRequestDevice_ptr;
	public static void wgpuAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor* descriptor, WGPURequestDeviceCallback callback, void* userdata)
	{
		wgpuAdapterRequestDevice_ptr(adapter, descriptor, callback, userdata);
	}

	private static delegate* unmanaged<WGPUBindGroup, sbyte*, void> wgpuBindGroupSetLabel_ptr;
	public static void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, sbyte* label)
	{
		wgpuBindGroupSetLabel_ptr(bindGroup, label);
	}

	private static delegate* unmanaged<WGPUBindGroupLayout, sbyte*, void> wgpuBindGroupLayoutSetLabel_ptr;
	public static void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, sbyte* label)
	{
		wgpuBindGroupLayoutSetLabel_ptr(bindGroupLayout, label);
	}

	private static delegate* unmanaged<WGPUBuffer, void> wgpuBufferDestroy_ptr;
	public static void wgpuBufferDestroy(WGPUBuffer buffer)
	{
		wgpuBufferDestroy_ptr(buffer);
	}

	private static delegate* unmanaged<WGPUBuffer, nuint, nuint, void*> wgpuBufferGetConstMappedRange_ptr;
	public static void* wgpuBufferGetConstMappedRange(WGPUBuffer buffer, nuint offset, nuint size)
	{
		return wgpuBufferGetConstMappedRange_ptr(buffer, offset, size);
	}

	private static delegate* unmanaged<WGPUBuffer, WGPUBufferMapState> wgpuBufferGetMapState_ptr;
	public static WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer)
	{
		return wgpuBufferGetMapState_ptr(buffer);
	}

	private static delegate* unmanaged<WGPUBuffer, nuint, nuint, void*> wgpuBufferGetMappedRange_ptr;
	public static void* wgpuBufferGetMappedRange(WGPUBuffer buffer, nuint offset, nuint size)
	{
		return wgpuBufferGetMappedRange_ptr(buffer, offset, size);
	}

	private static delegate* unmanaged<WGPUBuffer, ulong> wgpuBufferGetSize_ptr;
	public static ulong wgpuBufferGetSize(WGPUBuffer buffer)
	{
		return wgpuBufferGetSize_ptr(buffer);
	}

	private static delegate* unmanaged<WGPUBuffer, WGPUBufferUsage> wgpuBufferGetUsage_ptr;
	public static WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer)
	{
		return wgpuBufferGetUsage_ptr(buffer);
	}

	private static delegate* unmanaged<WGPUBuffer, WGPUMapModeFlags, nuint, nuint, WGPUBufferMapCallback, void*, void> wgpuBufferMapAsync_ptr;
	public static void wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, nuint offset, nuint size, WGPUBufferMapCallback callback, void* userdata)
	{
		wgpuBufferMapAsync_ptr(buffer, mode, offset, size, callback, userdata);
	}

	private static delegate* unmanaged<WGPUBuffer, sbyte*, void> wgpuBufferSetLabel_ptr;
	public static void wgpuBufferSetLabel(WGPUBuffer buffer, sbyte* label)
	{
		wgpuBufferSetLabel_ptr(buffer, label);
	}

	private static delegate* unmanaged<WGPUBuffer, void> wgpuBufferUnmap_ptr;
	public static void wgpuBufferUnmap(WGPUBuffer buffer)
	{
		wgpuBufferUnmap_ptr(buffer);
	}

	private static delegate* unmanaged<WGPUCommandBuffer, sbyte*, void> wgpuCommandBufferSetLabel_ptr;
	public static void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, sbyte* label)
	{
		wgpuCommandBufferSetLabel_ptr(commandBuffer, label);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUComputePassDescriptor*, WGPUComputePassEncoder> wgpuCommandEncoderBeginComputePass_ptr;
	public static WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor* descriptor)
	{
		return wgpuCommandEncoderBeginComputePass_ptr(commandEncoder, descriptor);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPURenderPassDescriptor*, WGPURenderPassEncoder> wgpuCommandEncoderBeginRenderPass_ptr;
	public static WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor* descriptor)
	{
		return wgpuCommandEncoderBeginRenderPass_ptr(commandEncoder, descriptor);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUBuffer, ulong, ulong, void> wgpuCommandEncoderClearBuffer_ptr;
	public static void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, ulong offset, ulong size)
	{
		wgpuCommandEncoderClearBuffer_ptr(commandEncoder, buffer, offset, size);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUBuffer, ulong, WGPUBuffer, ulong, ulong, void> wgpuCommandEncoderCopyBufferToBuffer_ptr;
	public static void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, ulong sourceOffset, WGPUBuffer destination, ulong destinationOffset, ulong size)
	{
		wgpuCommandEncoderCopyBufferToBuffer_ptr(commandEncoder, source, sourceOffset, destination, destinationOffset, size);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUImageCopyBuffer*, WGPUImageCopyTexture*, WGPUExtent3D*, void> wgpuCommandEncoderCopyBufferToTexture_ptr;
	public static void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer* source, WGPUImageCopyTexture* destination, WGPUExtent3D* copySize)
	{
		wgpuCommandEncoderCopyBufferToTexture_ptr(commandEncoder, source, destination, copySize);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUImageCopyTexture*, WGPUImageCopyBuffer*, WGPUExtent3D*, void> wgpuCommandEncoderCopyTextureToBuffer_ptr;
	public static void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture* source, WGPUImageCopyBuffer* destination, WGPUExtent3D* copySize)
	{
		wgpuCommandEncoderCopyTextureToBuffer_ptr(commandEncoder, source, destination, copySize);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUImageCopyTexture*, WGPUImageCopyTexture*, WGPUExtent3D*, void> wgpuCommandEncoderCopyTextureToTexture_ptr;
	public static void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture* source, WGPUImageCopyTexture* destination, WGPUExtent3D* copySize)
	{
		wgpuCommandEncoderCopyTextureToTexture_ptr(commandEncoder, source, destination, copySize);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUCommandBufferDescriptor*, WGPUCommandBuffer> wgpuCommandEncoderFinish_ptr;
	public static WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor* descriptor)
	{
		return wgpuCommandEncoderFinish_ptr(commandEncoder, descriptor);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, sbyte*, void> wgpuCommandEncoderInsertDebugMarker_ptr;
	public static void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, sbyte* markerLabel)
	{
		wgpuCommandEncoderInsertDebugMarker_ptr(commandEncoder, markerLabel);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, void> wgpuCommandEncoderPopDebugGroup_ptr;
	public static void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder)
	{
		wgpuCommandEncoderPopDebugGroup_ptr(commandEncoder);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, sbyte*, void> wgpuCommandEncoderPushDebugGroup_ptr;
	public static void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, sbyte* groupLabel)
	{
		wgpuCommandEncoderPushDebugGroup_ptr(commandEncoder, groupLabel);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUQuerySet, uint, int, WGPUBuffer, ulong, void> wgpuCommandEncoderResolveQuerySet_ptr;
	public static void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint firstQuery, int queryCount, WGPUBuffer destination, ulong destinationOffset)
	{
		wgpuCommandEncoderResolveQuerySet_ptr(commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, sbyte*, void> wgpuCommandEncoderSetLabel_ptr;
	public static void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, sbyte* label)
	{
		wgpuCommandEncoderSetLabel_ptr(commandEncoder, label);
	}

	private static delegate* unmanaged<WGPUCommandEncoder, WGPUQuerySet, uint, void> wgpuCommandEncoderWriteTimestamp_ptr;
	public static void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint queryIndex)
	{
		wgpuCommandEncoderWriteTimestamp_ptr(commandEncoder, querySet, queryIndex);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, WGPUQuerySet, uint, void> wgpuComputePassEncoderBeginPipelineStatisticsQuery_ptr;
	public static void wgpuComputePassEncoderBeginPipelineStatisticsQuery(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint queryIndex)
	{
		wgpuComputePassEncoderBeginPipelineStatisticsQuery_ptr(computePassEncoder, querySet, queryIndex);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, uint, uint, uint, void> wgpuComputePassEncoderDispatchWorkgroups_ptr;
	public static void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint workgroupCountX, uint workgroupCountY, uint workgroupCountZ)
	{
		wgpuComputePassEncoderDispatchWorkgroups_ptr(computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, WGPUBuffer, ulong, void> wgpuComputePassEncoderDispatchWorkgroupsIndirect_ptr;
	public static void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset)
	{
		wgpuComputePassEncoderDispatchWorkgroupsIndirect_ptr(computePassEncoder, indirectBuffer, indirectOffset);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, void> wgpuComputePassEncoderEnd_ptr;
	public static void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder)
	{
		wgpuComputePassEncoderEnd_ptr(computePassEncoder);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, void> wgpuComputePassEncoderEndPipelineStatisticsQuery_ptr;
	public static void wgpuComputePassEncoderEndPipelineStatisticsQuery(WGPUComputePassEncoder computePassEncoder)
	{
		wgpuComputePassEncoderEndPipelineStatisticsQuery_ptr(computePassEncoder);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, sbyte*, void> wgpuComputePassEncoderInsertDebugMarker_ptr;
	public static void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, sbyte* markerLabel)
	{
		wgpuComputePassEncoderInsertDebugMarker_ptr(computePassEncoder, markerLabel);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, void> wgpuComputePassEncoderPopDebugGroup_ptr;
	public static void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder)
	{
		wgpuComputePassEncoderPopDebugGroup_ptr(computePassEncoder);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, sbyte*, void> wgpuComputePassEncoderPushDebugGroup_ptr;
	public static void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, sbyte* groupLabel)
	{
		wgpuComputePassEncoderPushDebugGroup_ptr(computePassEncoder, groupLabel);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, uint, WGPUBindGroup, int, uint*, void> wgpuComputePassEncoderSetBindGroup_ptr;
	public static void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint groupIndex, WGPUBindGroup group, int dynamicOffsetCount, uint* dynamicOffsets)
	{
		wgpuComputePassEncoderSetBindGroup_ptr(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, sbyte*, void> wgpuComputePassEncoderSetLabel_ptr;
	public static void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, sbyte* label)
	{
		wgpuComputePassEncoderSetLabel_ptr(computePassEncoder, label);
	}

	private static delegate* unmanaged<WGPUComputePassEncoder, WGPUComputePipeline, void> wgpuComputePassEncoderSetPipeline_ptr;
	public static void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline)
	{
		wgpuComputePassEncoderSetPipeline_ptr(computePassEncoder, pipeline);
	}

	private static delegate* unmanaged<WGPUComputePipeline, uint, WGPUBindGroupLayout> wgpuComputePipelineGetBindGroupLayout_ptr;
	public static WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint groupIndex)
	{
		return wgpuComputePipelineGetBindGroupLayout_ptr(computePipeline, groupIndex);
	}

	private static delegate* unmanaged<WGPUComputePipeline, sbyte*, void> wgpuComputePipelineSetLabel_ptr;
	public static void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, sbyte* label)
	{
		wgpuComputePipelineSetLabel_ptr(computePipeline, label);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUBindGroupDescriptor*, WGPUBindGroup> wgpuDeviceCreateBindGroup_ptr;
	public static WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor* descriptor)
	{
		return wgpuDeviceCreateBindGroup_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUBindGroupLayoutDescriptor*, WGPUBindGroupLayout> wgpuDeviceCreateBindGroupLayout_ptr;
	public static WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor* descriptor)
	{
		return wgpuDeviceCreateBindGroupLayout_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUBufferDescriptor*, WGPUBuffer> wgpuDeviceCreateBuffer_ptr;
	public static WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor* descriptor)
	{
		return wgpuDeviceCreateBuffer_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUCommandEncoderDescriptor*, WGPUCommandEncoder> wgpuDeviceCreateCommandEncoder_ptr;
	public static WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor* descriptor)
	{
		return wgpuDeviceCreateCommandEncoder_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUComputePipelineDescriptor*, WGPUComputePipeline> wgpuDeviceCreateComputePipeline_ptr;
	public static WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor* descriptor)
	{
		return wgpuDeviceCreateComputePipeline_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUComputePipelineDescriptor*, WGPUCreateComputePipelineAsyncCallback, void*, void> wgpuDeviceCreateComputePipelineAsync_ptr;
	public static void wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor* descriptor, WGPUCreateComputePipelineAsyncCallback callback, void* userdata)
	{
		wgpuDeviceCreateComputePipelineAsync_ptr(device, descriptor, callback, userdata);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUPipelineLayoutDescriptor*, WGPUPipelineLayout> wgpuDeviceCreatePipelineLayout_ptr;
	public static WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor* descriptor)
	{
		return wgpuDeviceCreatePipelineLayout_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUQuerySetDescriptor*, WGPUQuerySet> wgpuDeviceCreateQuerySet_ptr;
	public static WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor* descriptor)
	{
		return wgpuDeviceCreateQuerySet_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPURenderBundleEncoderDescriptor*, WGPURenderBundleEncoder> wgpuDeviceCreateRenderBundleEncoder_ptr;
	public static WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor* descriptor)
	{
		return wgpuDeviceCreateRenderBundleEncoder_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPURenderPipelineDescriptor*, WGPURenderPipeline> wgpuDeviceCreateRenderPipeline_ptr;
	public static WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor* descriptor)
	{
		return wgpuDeviceCreateRenderPipeline_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPURenderPipelineDescriptor*, WGPUCreateRenderPipelineAsyncCallback, void*, void> wgpuDeviceCreateRenderPipelineAsync_ptr;
	public static void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor* descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void* userdata)
	{
		wgpuDeviceCreateRenderPipelineAsync_ptr(device, descriptor, callback, userdata);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUSamplerDescriptor*, WGPUSampler> wgpuDeviceCreateSampler_ptr;
	public static WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor* descriptor)
	{
		return wgpuDeviceCreateSampler_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUShaderModuleDescriptor*, WGPUShaderModule> wgpuDeviceCreateShaderModule_ptr;
	public static WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor* descriptor)
	{
		return wgpuDeviceCreateShaderModule_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUSurface, WGPUSwapChainDescriptor*, WGPUSwapChain> wgpuDeviceCreateSwapChain_ptr;
	public static WGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor* descriptor)
	{
		return wgpuDeviceCreateSwapChain_ptr(device, surface, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUTextureDescriptor*, WGPUTexture> wgpuDeviceCreateTexture_ptr;
	public static WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor* descriptor)
	{
		return wgpuDeviceCreateTexture_ptr(device, descriptor);
	}

	private static delegate* unmanaged<WGPUDevice, void> wgpuDeviceDestroy_ptr;
	public static void wgpuDeviceDestroy(WGPUDevice device)
	{
		wgpuDeviceDestroy_ptr(device);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUFeatureName*, nuint> wgpuDeviceEnumerateFeatures_ptr;
	public static nuint wgpuDeviceEnumerateFeatures(WGPUDevice device, WGPUFeatureName* features)
	{
		return wgpuDeviceEnumerateFeatures_ptr(device, features);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUSupportedLimits*, bool> wgpuDeviceGetLimits_ptr;
	public static bool wgpuDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits* limits)
	{
		return wgpuDeviceGetLimits_ptr(device, limits);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUQueue> wgpuDeviceGetQueue_ptr;
	public static WGPUQueue wgpuDeviceGetQueue(WGPUDevice device)
	{
		return wgpuDeviceGetQueue_ptr(device);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUFeatureName, bool> wgpuDeviceHasFeature_ptr;
	public static bool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature)
	{
		return wgpuDeviceHasFeature_ptr(device, feature);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUErrorCallback, void*, bool> wgpuDevicePopErrorScope_ptr;
	public static bool wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void* userdata)
	{
		return wgpuDevicePopErrorScope_ptr(device, callback, userdata);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUErrorFilter, void> wgpuDevicePushErrorScope_ptr;
	public static void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter)
	{
		wgpuDevicePushErrorScope_ptr(device, filter);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUDeviceLostCallback, void*, void> wgpuDeviceSetDeviceLostCallback_ptr;
	public static void wgpuDeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void* userdata)
	{
		wgpuDeviceSetDeviceLostCallback_ptr(device, callback, userdata);
	}

	private static delegate* unmanaged<WGPUDevice, sbyte*, void> wgpuDeviceSetLabel_ptr;
	public static void wgpuDeviceSetLabel(WGPUDevice device, sbyte* label)
	{
		wgpuDeviceSetLabel_ptr(device, label);
	}

	private static delegate* unmanaged<WGPUDevice, WGPUErrorCallback, void*, void> wgpuDeviceSetUncapturedErrorCallback_ptr;
	public static void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void* userdata)
	{
		wgpuDeviceSetUncapturedErrorCallback_ptr(device, callback, userdata);
	}

	private static delegate* unmanaged<WGPUInstance, WGPUSurfaceDescriptor*, WGPUSurface> wgpuInstanceCreateSurface_ptr;
	public static WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor* descriptor)
	{
		return wgpuInstanceCreateSurface_ptr(instance, descriptor);
	}

	private static delegate* unmanaged<WGPUInstance, void> wgpuInstanceProcessEvents_ptr;
	public static void wgpuInstanceProcessEvents(WGPUInstance instance)
	{
		wgpuInstanceProcessEvents_ptr(instance);
	}

	private static delegate* unmanaged<WGPUInstance, WGPURequestAdapterOptions*, WGPURequestAdapterCallback, void*, void> wgpuInstanceRequestAdapter_ptr;
	public static void wgpuInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions* options, WGPURequestAdapterCallback callback, void* userdata)
	{
		wgpuInstanceRequestAdapter_ptr(instance, options, callback, userdata);
	}

	private static delegate* unmanaged<WGPUPipelineLayout, sbyte*, void> wgpuPipelineLayoutSetLabel_ptr;
	public static void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, sbyte* label)
	{
		wgpuPipelineLayoutSetLabel_ptr(pipelineLayout, label);
	}

	private static delegate* unmanaged<WGPUQuerySet, void> wgpuQuerySetDestroy_ptr;
	public static void wgpuQuerySetDestroy(WGPUQuerySet querySet)
	{
		wgpuQuerySetDestroy_ptr(querySet);
	}

	private static delegate* unmanaged<WGPUQuerySet, uint> wgpuQuerySetGetCount_ptr;
	public static uint wgpuQuerySetGetCount(WGPUQuerySet querySet)
	{
		return wgpuQuerySetGetCount_ptr(querySet);
	}

	private static delegate* unmanaged<WGPUQuerySet, WGPUQueryType> wgpuQuerySetGetType_ptr;
	public static WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet)
	{
		return wgpuQuerySetGetType_ptr(querySet);
	}

	private static delegate* unmanaged<WGPUQuerySet, sbyte*, void> wgpuQuerySetSetLabel_ptr;
	public static void wgpuQuerySetSetLabel(WGPUQuerySet querySet, sbyte* label)
	{
		wgpuQuerySetSetLabel_ptr(querySet, label);
	}

	private static delegate* unmanaged<WGPUQueue, WGPUQueueWorkDoneCallback, void*, void> wgpuQueueOnSubmittedWorkDone_ptr;
	public static void wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, WGPUQueueWorkDoneCallback callback, void* userdata)
	{
		wgpuQueueOnSubmittedWorkDone_ptr(queue, callback, userdata);
	}

	private static delegate* unmanaged<WGPUQueue, sbyte*, void> wgpuQueueSetLabel_ptr;
	public static void wgpuQueueSetLabel(WGPUQueue queue, sbyte* label)
	{
		wgpuQueueSetLabel_ptr(queue, label);
	}

	private static delegate* unmanaged<WGPUQueue, int, WGPUCommandBuffer*, void> wgpuQueueSubmit_ptr;
	public static void wgpuQueueSubmit(WGPUQueue queue, int commandCount, WGPUCommandBuffer* commands)
	{
		wgpuQueueSubmit_ptr(queue, commandCount, commands);
	}

	private static delegate* unmanaged<WGPUQueue, WGPUBuffer, ulong, void*, nuint, void> wgpuQueueWriteBuffer_ptr;
	public static void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, ulong bufferOffset, void* data, nuint size)
	{
		wgpuQueueWriteBuffer_ptr(queue, buffer, bufferOffset, data, size);
	}

	private static delegate* unmanaged<WGPUQueue, WGPUImageCopyTexture*, void*, nuint, WGPUTextureDataLayout*, WGPUExtent3D*, void> wgpuQueueWriteTexture_ptr;
	public static void wgpuQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture* destination, void* data, nuint dataSize, WGPUTextureDataLayout* dataLayout, WGPUExtent3D* writeSize)
	{
		wgpuQueueWriteTexture_ptr(queue, destination, data, dataSize, dataLayout, writeSize);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, int, int, uint, uint, void> wgpuRenderBundleEncoderDraw_ptr;
	public static void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, int vertexCount, int instanceCount, uint firstVertex, uint firstInstance)
	{
		wgpuRenderBundleEncoderDraw_ptr(renderBundleEncoder, vertexCount, instanceCount, firstVertex, firstInstance);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, int, int, uint, int, uint, void> wgpuRenderBundleEncoderDrawIndexed_ptr;
	public static void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, int indexCount, int instanceCount, uint firstIndex, int baseVertex, uint firstInstance)
	{
		wgpuRenderBundleEncoderDrawIndexed_ptr(renderBundleEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, WGPUBuffer, ulong, void> wgpuRenderBundleEncoderDrawIndexedIndirect_ptr;
	public static void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset)
	{
		wgpuRenderBundleEncoderDrawIndexedIndirect_ptr(renderBundleEncoder, indirectBuffer, indirectOffset);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, WGPUBuffer, ulong, void> wgpuRenderBundleEncoderDrawIndirect_ptr;
	public static void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset)
	{
		wgpuRenderBundleEncoderDrawIndirect_ptr(renderBundleEncoder, indirectBuffer, indirectOffset);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, WGPURenderBundleDescriptor*, WGPURenderBundle> wgpuRenderBundleEncoderFinish_ptr;
	public static WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor* descriptor)
	{
		return wgpuRenderBundleEncoderFinish_ptr(renderBundleEncoder, descriptor);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, sbyte*, void> wgpuRenderBundleEncoderInsertDebugMarker_ptr;
	public static void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, sbyte* markerLabel)
	{
		wgpuRenderBundleEncoderInsertDebugMarker_ptr(renderBundleEncoder, markerLabel);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, void> wgpuRenderBundleEncoderPopDebugGroup_ptr;
	public static void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder)
	{
		wgpuRenderBundleEncoderPopDebugGroup_ptr(renderBundleEncoder);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, sbyte*, void> wgpuRenderBundleEncoderPushDebugGroup_ptr;
	public static void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, sbyte* groupLabel)
	{
		wgpuRenderBundleEncoderPushDebugGroup_ptr(renderBundleEncoder, groupLabel);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, uint, WGPUBindGroup, int, uint*, void> wgpuRenderBundleEncoderSetBindGroup_ptr;
	public static void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint groupIndex, WGPUBindGroup group, int dynamicOffsetCount, uint* dynamicOffsets)
	{
		wgpuRenderBundleEncoderSetBindGroup_ptr(renderBundleEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, WGPUBuffer, WGPUIndexFormat, ulong, ulong, void> wgpuRenderBundleEncoderSetIndexBuffer_ptr;
	public static void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size)
	{
		wgpuRenderBundleEncoderSetIndexBuffer_ptr(renderBundleEncoder, buffer, format, offset, size);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, sbyte*, void> wgpuRenderBundleEncoderSetLabel_ptr;
	public static void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, sbyte* label)
	{
		wgpuRenderBundleEncoderSetLabel_ptr(renderBundleEncoder, label);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, WGPURenderPipeline, void> wgpuRenderBundleEncoderSetPipeline_ptr;
	public static void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline)
	{
		wgpuRenderBundleEncoderSetPipeline_ptr(renderBundleEncoder, pipeline);
	}

	private static delegate* unmanaged<WGPURenderBundleEncoder, uint, WGPUBuffer, ulong, ulong, void> wgpuRenderBundleEncoderSetVertexBuffer_ptr;
	public static void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size)
	{
		wgpuRenderBundleEncoderSetVertexBuffer_ptr(renderBundleEncoder, slot, buffer, offset, size);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, uint, void> wgpuRenderPassEncoderBeginOcclusionQuery_ptr;
	public static void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint queryIndex)
	{
		wgpuRenderPassEncoderBeginOcclusionQuery_ptr(renderPassEncoder, queryIndex);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, WGPUQuerySet, uint, void> wgpuRenderPassEncoderBeginPipelineStatisticsQuery_ptr;
	public static void wgpuRenderPassEncoderBeginPipelineStatisticsQuery(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint queryIndex)
	{
		wgpuRenderPassEncoderBeginPipelineStatisticsQuery_ptr(renderPassEncoder, querySet, queryIndex);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, int, int, uint, uint, void> wgpuRenderPassEncoderDraw_ptr;
	public static void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, int vertexCount, int instanceCount, uint firstVertex, uint firstInstance)
	{
		wgpuRenderPassEncoderDraw_ptr(renderPassEncoder, vertexCount, instanceCount, firstVertex, firstInstance);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, int, int, uint, int, uint, void> wgpuRenderPassEncoderDrawIndexed_ptr;
	public static void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, int indexCount, int instanceCount, uint firstIndex, int baseVertex, uint firstInstance)
	{
		wgpuRenderPassEncoderDrawIndexed_ptr(renderPassEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, WGPUBuffer, ulong, void> wgpuRenderPassEncoderDrawIndexedIndirect_ptr;
	public static void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset)
	{
		wgpuRenderPassEncoderDrawIndexedIndirect_ptr(renderPassEncoder, indirectBuffer, indirectOffset);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, WGPUBuffer, ulong, void> wgpuRenderPassEncoderDrawIndirect_ptr;
	public static void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset)
	{
		wgpuRenderPassEncoderDrawIndirect_ptr(renderPassEncoder, indirectBuffer, indirectOffset);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, void> wgpuRenderPassEncoderEnd_ptr;
	public static void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder)
	{
		wgpuRenderPassEncoderEnd_ptr(renderPassEncoder);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, void> wgpuRenderPassEncoderEndOcclusionQuery_ptr;
	public static void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder)
	{
		wgpuRenderPassEncoderEndOcclusionQuery_ptr(renderPassEncoder);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, void> wgpuRenderPassEncoderEndPipelineStatisticsQuery_ptr;
	public static void wgpuRenderPassEncoderEndPipelineStatisticsQuery(WGPURenderPassEncoder renderPassEncoder)
	{
		wgpuRenderPassEncoderEndPipelineStatisticsQuery_ptr(renderPassEncoder);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, int, WGPURenderBundle*, void> wgpuRenderPassEncoderExecuteBundles_ptr;
	public static void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, int bundleCount, WGPURenderBundle* bundles)
	{
		wgpuRenderPassEncoderExecuteBundles_ptr(renderPassEncoder, bundleCount, bundles);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, sbyte*, void> wgpuRenderPassEncoderInsertDebugMarker_ptr;
	public static void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, sbyte* markerLabel)
	{
		wgpuRenderPassEncoderInsertDebugMarker_ptr(renderPassEncoder, markerLabel);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, void> wgpuRenderPassEncoderPopDebugGroup_ptr;
	public static void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder)
	{
		wgpuRenderPassEncoderPopDebugGroup_ptr(renderPassEncoder);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, sbyte*, void> wgpuRenderPassEncoderPushDebugGroup_ptr;
	public static void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, sbyte* groupLabel)
	{
		wgpuRenderPassEncoderPushDebugGroup_ptr(renderPassEncoder, groupLabel);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, uint, WGPUBindGroup, int, uint*, void> wgpuRenderPassEncoderSetBindGroup_ptr;
	public static void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint groupIndex, WGPUBindGroup group, int dynamicOffsetCount, uint* dynamicOffsets)
	{
		wgpuRenderPassEncoderSetBindGroup_ptr(renderPassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, WGPUColor*, void> wgpuRenderPassEncoderSetBlendConstant_ptr;
	public static void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor* color)
	{
		wgpuRenderPassEncoderSetBlendConstant_ptr(renderPassEncoder, color);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, WGPUBuffer, WGPUIndexFormat, ulong, ulong, void> wgpuRenderPassEncoderSetIndexBuffer_ptr;
	public static void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset, ulong size)
	{
		wgpuRenderPassEncoderSetIndexBuffer_ptr(renderPassEncoder, buffer, format, offset, size);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, sbyte*, void> wgpuRenderPassEncoderSetLabel_ptr;
	public static void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, sbyte* label)
	{
		wgpuRenderPassEncoderSetLabel_ptr(renderPassEncoder, label);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, WGPURenderPipeline, void> wgpuRenderPassEncoderSetPipeline_ptr;
	public static void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline)
	{
		wgpuRenderPassEncoderSetPipeline_ptr(renderPassEncoder, pipeline);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, uint, uint, uint, uint, void> wgpuRenderPassEncoderSetScissorRect_ptr;
	public static void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint x, uint y, uint width, uint height)
	{
		wgpuRenderPassEncoderSetScissorRect_ptr(renderPassEncoder, x, y, width, height);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, uint, void> wgpuRenderPassEncoderSetStencilReference_ptr;
	public static void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint reference)
	{
		wgpuRenderPassEncoderSetStencilReference_ptr(renderPassEncoder, reference);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, uint, WGPUBuffer, ulong, ulong, void> wgpuRenderPassEncoderSetVertexBuffer_ptr;
	public static void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint slot, WGPUBuffer buffer, ulong offset, ulong size)
	{
		wgpuRenderPassEncoderSetVertexBuffer_ptr(renderPassEncoder, slot, buffer, offset, size);
	}

	private static delegate* unmanaged<WGPURenderPassEncoder, float, float, float, float, float, float, void> wgpuRenderPassEncoderSetViewport_ptr;
	public static void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth)
	{
		wgpuRenderPassEncoderSetViewport_ptr(renderPassEncoder, x, y, width, height, minDepth, maxDepth);
	}

	private static delegate* unmanaged<WGPURenderPipeline, uint, WGPUBindGroupLayout> wgpuRenderPipelineGetBindGroupLayout_ptr;
	public static WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint groupIndex)
	{
		return wgpuRenderPipelineGetBindGroupLayout_ptr(renderPipeline, groupIndex);
	}

	private static delegate* unmanaged<WGPURenderPipeline, sbyte*, void> wgpuRenderPipelineSetLabel_ptr;
	public static void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, sbyte* label)
	{
		wgpuRenderPipelineSetLabel_ptr(renderPipeline, label);
	}

	private static delegate* unmanaged<WGPUSampler, sbyte*, void> wgpuSamplerSetLabel_ptr;
	public static void wgpuSamplerSetLabel(WGPUSampler sampler, sbyte* label)
	{
		wgpuSamplerSetLabel_ptr(sampler, label);
	}

	private static delegate* unmanaged<WGPUShaderModule, WGPUCompilationInfoCallback, void*, void> wgpuShaderModuleGetCompilationInfo_ptr;
	public static void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void* userdata)
	{
		wgpuShaderModuleGetCompilationInfo_ptr(shaderModule, callback, userdata);
	}

	private static delegate* unmanaged<WGPUShaderModule, sbyte*, void> wgpuShaderModuleSetLabel_ptr;
	public static void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, sbyte* label)
	{
		wgpuShaderModuleSetLabel_ptr(shaderModule, label);
	}

	private static delegate* unmanaged<WGPUSurface, WGPUAdapter, WGPUTextureFormat> wgpuSurfaceGetPreferredFormat_ptr;
	public static WGPUTextureFormat wgpuSurfaceGetPreferredFormat(WGPUSurface surface, WGPUAdapter adapter)
	{
		return wgpuSurfaceGetPreferredFormat_ptr(surface, adapter);
	}

	private static delegate* unmanaged<WGPUSwapChain, WGPUTextureView> wgpuSwapChainGetCurrentTextureView_ptr;
	public static WGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain swapChain)
	{
		return wgpuSwapChainGetCurrentTextureView_ptr(swapChain);
	}

	private static delegate* unmanaged<WGPUSwapChain, void> wgpuSwapChainPresent_ptr;
	public static void wgpuSwapChainPresent(WGPUSwapChain swapChain)
	{
		wgpuSwapChainPresent_ptr(swapChain);
	}

	private static delegate* unmanaged<WGPUTexture, WGPUTextureViewDescriptor*, WGPUTextureView> wgpuTextureCreateView_ptr;
	public static WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor* descriptor)
	{
		return wgpuTextureCreateView_ptr(texture, descriptor);
	}

	private static delegate* unmanaged<WGPUTexture, void> wgpuTextureDestroy_ptr;
	public static void wgpuTextureDestroy(WGPUTexture texture)
	{
		wgpuTextureDestroy_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, uint> wgpuTextureGetDepthOrArrayLayers_ptr;
	public static uint wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture)
	{
		return wgpuTextureGetDepthOrArrayLayers_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, WGPUTextureDimension> wgpuTextureGetDimension_ptr;
	public static WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture)
	{
		return wgpuTextureGetDimension_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, WGPUTextureFormat> wgpuTextureGetFormat_ptr;
	public static WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture)
	{
		return wgpuTextureGetFormat_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, uint> wgpuTextureGetHeight_ptr;
	public static uint wgpuTextureGetHeight(WGPUTexture texture)
	{
		return wgpuTextureGetHeight_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, uint> wgpuTextureGetMipLevelCount_ptr;
	public static uint wgpuTextureGetMipLevelCount(WGPUTexture texture)
	{
		return wgpuTextureGetMipLevelCount_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, uint> wgpuTextureGetSampleCount_ptr;
	public static uint wgpuTextureGetSampleCount(WGPUTexture texture)
	{
		return wgpuTextureGetSampleCount_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, WGPUTextureUsage> wgpuTextureGetUsage_ptr;
	public static WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture)
	{
		return wgpuTextureGetUsage_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, uint> wgpuTextureGetWidth_ptr;
	public static uint wgpuTextureGetWidth(WGPUTexture texture)
	{
		return wgpuTextureGetWidth_ptr(texture);
	}

	private static delegate* unmanaged<WGPUTexture, sbyte*, void> wgpuTextureSetLabel_ptr;
	public static void wgpuTextureSetLabel(WGPUTexture texture, sbyte* label)
	{
		wgpuTextureSetLabel_ptr(texture, label);
	}

	private static delegate* unmanaged<WGPUTextureView, sbyte*, void> wgpuTextureViewSetLabel_ptr;
	public static void wgpuTextureViewSetLabel(WGPUTextureView textureView, sbyte* label)
	{
		wgpuTextureViewSetLabel_ptr(textureView, label);
	}

	private static void GenLoadCommands()
	{
		wgpuGetProcAddress_ptr = (delegate* unmanaged<WGPUDevice, sbyte*, WGPUProc>) LoadFunctionPointer(nameof(wgpuGetProcAddress));
		wgpuAdapterEnumerateFeatures_ptr = (delegate* unmanaged<WGPUAdapter, WGPUFeatureName*, nuint>) LoadFunctionPointer(nameof(wgpuAdapterEnumerateFeatures));
		wgpuAdapterGetLimits_ptr = (delegate* unmanaged<WGPUAdapter, WGPUSupportedLimits*, bool>) LoadFunctionPointer(nameof(wgpuAdapterGetLimits));
		wgpuAdapterGetProperties_ptr = (delegate* unmanaged<WGPUAdapter, WGPUAdapterProperties*, void>) LoadFunctionPointer(nameof(wgpuAdapterGetProperties));
		wgpuAdapterHasFeature_ptr = (delegate* unmanaged<WGPUAdapter, WGPUFeatureName, bool>) LoadFunctionPointer(nameof(wgpuAdapterHasFeature));
		wgpuAdapterRequestDevice_ptr = (delegate* unmanaged<WGPUAdapter, WGPUDeviceDescriptor*, WGPURequestDeviceCallback, void*, void>) LoadFunctionPointer(nameof(wgpuAdapterRequestDevice));
		wgpuBindGroupSetLabel_ptr = (delegate* unmanaged<WGPUBindGroup, sbyte*, void>) LoadFunctionPointer(nameof(wgpuBindGroupSetLabel));
		wgpuBindGroupLayoutSetLabel_ptr = (delegate* unmanaged<WGPUBindGroupLayout, sbyte*, void>) LoadFunctionPointer(nameof(wgpuBindGroupLayoutSetLabel));
		wgpuBufferDestroy_ptr = (delegate* unmanaged<WGPUBuffer, void>) LoadFunctionPointer(nameof(wgpuBufferDestroy));
		wgpuBufferGetConstMappedRange_ptr = (delegate* unmanaged<WGPUBuffer, nuint, nuint, void*>) LoadFunctionPointer(nameof(wgpuBufferGetConstMappedRange));
		wgpuBufferGetMapState_ptr = (delegate* unmanaged<WGPUBuffer, WGPUBufferMapState>) LoadFunctionPointer(nameof(wgpuBufferGetMapState));
		wgpuBufferGetMappedRange_ptr = (delegate* unmanaged<WGPUBuffer, nuint, nuint, void*>) LoadFunctionPointer(nameof(wgpuBufferGetMappedRange));
		wgpuBufferGetSize_ptr = (delegate* unmanaged<WGPUBuffer, ulong>) LoadFunctionPointer(nameof(wgpuBufferGetSize));
		wgpuBufferGetUsage_ptr = (delegate* unmanaged<WGPUBuffer, WGPUBufferUsage>) LoadFunctionPointer(nameof(wgpuBufferGetUsage));
		wgpuBufferMapAsync_ptr = (delegate* unmanaged<WGPUBuffer, WGPUMapModeFlags, nuint, nuint, WGPUBufferMapCallback, void*, void>) LoadFunctionPointer(nameof(wgpuBufferMapAsync));
		wgpuBufferSetLabel_ptr = (delegate* unmanaged<WGPUBuffer, sbyte*, void>) LoadFunctionPointer(nameof(wgpuBufferSetLabel));
		wgpuBufferUnmap_ptr = (delegate* unmanaged<WGPUBuffer, void>) LoadFunctionPointer(nameof(wgpuBufferUnmap));
		wgpuCommandBufferSetLabel_ptr = (delegate* unmanaged<WGPUCommandBuffer, sbyte*, void>) LoadFunctionPointer(nameof(wgpuCommandBufferSetLabel));
		wgpuCommandEncoderBeginComputePass_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUComputePassDescriptor*, WGPUComputePassEncoder>) LoadFunctionPointer(nameof(wgpuCommandEncoderBeginComputePass));
		wgpuCommandEncoderBeginRenderPass_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPURenderPassDescriptor*, WGPURenderPassEncoder>) LoadFunctionPointer(nameof(wgpuCommandEncoderBeginRenderPass));
		wgpuCommandEncoderClearBuffer_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUBuffer, ulong, ulong, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderClearBuffer));
		wgpuCommandEncoderCopyBufferToBuffer_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUBuffer, ulong, WGPUBuffer, ulong, ulong, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderCopyBufferToBuffer));
		wgpuCommandEncoderCopyBufferToTexture_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUImageCopyBuffer*, WGPUImageCopyTexture*, WGPUExtent3D*, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderCopyBufferToTexture));
		wgpuCommandEncoderCopyTextureToBuffer_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUImageCopyTexture*, WGPUImageCopyBuffer*, WGPUExtent3D*, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderCopyTextureToBuffer));
		wgpuCommandEncoderCopyTextureToTexture_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUImageCopyTexture*, WGPUImageCopyTexture*, WGPUExtent3D*, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderCopyTextureToTexture));
		wgpuCommandEncoderFinish_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUCommandBufferDescriptor*, WGPUCommandBuffer>) LoadFunctionPointer(nameof(wgpuCommandEncoderFinish));
		wgpuCommandEncoderInsertDebugMarker_ptr = (delegate* unmanaged<WGPUCommandEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderInsertDebugMarker));
		wgpuCommandEncoderPopDebugGroup_ptr = (delegate* unmanaged<WGPUCommandEncoder, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderPopDebugGroup));
		wgpuCommandEncoderPushDebugGroup_ptr = (delegate* unmanaged<WGPUCommandEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderPushDebugGroup));
		wgpuCommandEncoderResolveQuerySet_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUQuerySet, uint, int, WGPUBuffer, ulong, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderResolveQuerySet));
		wgpuCommandEncoderSetLabel_ptr = (delegate* unmanaged<WGPUCommandEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderSetLabel));
		wgpuCommandEncoderWriteTimestamp_ptr = (delegate* unmanaged<WGPUCommandEncoder, WGPUQuerySet, uint, void>) LoadFunctionPointer(nameof(wgpuCommandEncoderWriteTimestamp));
		wgpuComputePassEncoderBeginPipelineStatisticsQuery_ptr = (delegate* unmanaged<WGPUComputePassEncoder, WGPUQuerySet, uint, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderBeginPipelineStatisticsQuery));
		wgpuComputePassEncoderDispatchWorkgroups_ptr = (delegate* unmanaged<WGPUComputePassEncoder, uint, uint, uint, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderDispatchWorkgroups));
		wgpuComputePassEncoderDispatchWorkgroupsIndirect_ptr = (delegate* unmanaged<WGPUComputePassEncoder, WGPUBuffer, ulong, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderDispatchWorkgroupsIndirect));
		wgpuComputePassEncoderEnd_ptr = (delegate* unmanaged<WGPUComputePassEncoder, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderEnd));
		wgpuComputePassEncoderEndPipelineStatisticsQuery_ptr = (delegate* unmanaged<WGPUComputePassEncoder, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderEndPipelineStatisticsQuery));
		wgpuComputePassEncoderInsertDebugMarker_ptr = (delegate* unmanaged<WGPUComputePassEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderInsertDebugMarker));
		wgpuComputePassEncoderPopDebugGroup_ptr = (delegate* unmanaged<WGPUComputePassEncoder, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderPopDebugGroup));
		wgpuComputePassEncoderPushDebugGroup_ptr = (delegate* unmanaged<WGPUComputePassEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderPushDebugGroup));
		wgpuComputePassEncoderSetBindGroup_ptr = (delegate* unmanaged<WGPUComputePassEncoder, uint, WGPUBindGroup, int, uint*, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderSetBindGroup));
		wgpuComputePassEncoderSetLabel_ptr = (delegate* unmanaged<WGPUComputePassEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderSetLabel));
		wgpuComputePassEncoderSetPipeline_ptr = (delegate* unmanaged<WGPUComputePassEncoder, WGPUComputePipeline, void>) LoadFunctionPointer(nameof(wgpuComputePassEncoderSetPipeline));
		wgpuComputePipelineGetBindGroupLayout_ptr = (delegate* unmanaged<WGPUComputePipeline, uint, WGPUBindGroupLayout>) LoadFunctionPointer(nameof(wgpuComputePipelineGetBindGroupLayout));
		wgpuComputePipelineSetLabel_ptr = (delegate* unmanaged<WGPUComputePipeline, sbyte*, void>) LoadFunctionPointer(nameof(wgpuComputePipelineSetLabel));
		wgpuDeviceCreateBindGroup_ptr = (delegate* unmanaged<WGPUDevice, WGPUBindGroupDescriptor*, WGPUBindGroup>) LoadFunctionPointer(nameof(wgpuDeviceCreateBindGroup));
		wgpuDeviceCreateBindGroupLayout_ptr = (delegate* unmanaged<WGPUDevice, WGPUBindGroupLayoutDescriptor*, WGPUBindGroupLayout>) LoadFunctionPointer(nameof(wgpuDeviceCreateBindGroupLayout));
		wgpuDeviceCreateBuffer_ptr = (delegate* unmanaged<WGPUDevice, WGPUBufferDescriptor*, WGPUBuffer>) LoadFunctionPointer(nameof(wgpuDeviceCreateBuffer));
		wgpuDeviceCreateCommandEncoder_ptr = (delegate* unmanaged<WGPUDevice, WGPUCommandEncoderDescriptor*, WGPUCommandEncoder>) LoadFunctionPointer(nameof(wgpuDeviceCreateCommandEncoder));
		wgpuDeviceCreateComputePipeline_ptr = (delegate* unmanaged<WGPUDevice, WGPUComputePipelineDescriptor*, WGPUComputePipeline>) LoadFunctionPointer(nameof(wgpuDeviceCreateComputePipeline));
		wgpuDeviceCreateComputePipelineAsync_ptr = (delegate* unmanaged<WGPUDevice, WGPUComputePipelineDescriptor*, WGPUCreateComputePipelineAsyncCallback, void*, void>) LoadFunctionPointer(nameof(wgpuDeviceCreateComputePipelineAsync));
		wgpuDeviceCreatePipelineLayout_ptr = (delegate* unmanaged<WGPUDevice, WGPUPipelineLayoutDescriptor*, WGPUPipelineLayout>) LoadFunctionPointer(nameof(wgpuDeviceCreatePipelineLayout));
		wgpuDeviceCreateQuerySet_ptr = (delegate* unmanaged<WGPUDevice, WGPUQuerySetDescriptor*, WGPUQuerySet>) LoadFunctionPointer(nameof(wgpuDeviceCreateQuerySet));
		wgpuDeviceCreateRenderBundleEncoder_ptr = (delegate* unmanaged<WGPUDevice, WGPURenderBundleEncoderDescriptor*, WGPURenderBundleEncoder>) LoadFunctionPointer(nameof(wgpuDeviceCreateRenderBundleEncoder));
		wgpuDeviceCreateRenderPipeline_ptr = (delegate* unmanaged<WGPUDevice, WGPURenderPipelineDescriptor*, WGPURenderPipeline>) LoadFunctionPointer(nameof(wgpuDeviceCreateRenderPipeline));
		wgpuDeviceCreateRenderPipelineAsync_ptr = (delegate* unmanaged<WGPUDevice, WGPURenderPipelineDescriptor*, WGPUCreateRenderPipelineAsyncCallback, void*, void>) LoadFunctionPointer(nameof(wgpuDeviceCreateRenderPipelineAsync));
		wgpuDeviceCreateSampler_ptr = (delegate* unmanaged<WGPUDevice, WGPUSamplerDescriptor*, WGPUSampler>) LoadFunctionPointer(nameof(wgpuDeviceCreateSampler));
		wgpuDeviceCreateShaderModule_ptr = (delegate* unmanaged<WGPUDevice, WGPUShaderModuleDescriptor*, WGPUShaderModule>) LoadFunctionPointer(nameof(wgpuDeviceCreateShaderModule));
		wgpuDeviceCreateSwapChain_ptr = (delegate* unmanaged<WGPUDevice, WGPUSurface, WGPUSwapChainDescriptor*, WGPUSwapChain>) LoadFunctionPointer(nameof(wgpuDeviceCreateSwapChain));
		wgpuDeviceCreateTexture_ptr = (delegate* unmanaged<WGPUDevice, WGPUTextureDescriptor*, WGPUTexture>) LoadFunctionPointer(nameof(wgpuDeviceCreateTexture));
		wgpuDeviceDestroy_ptr = (delegate* unmanaged<WGPUDevice, void>) LoadFunctionPointer(nameof(wgpuDeviceDestroy));
		wgpuDeviceEnumerateFeatures_ptr = (delegate* unmanaged<WGPUDevice, WGPUFeatureName*, nuint>) LoadFunctionPointer(nameof(wgpuDeviceEnumerateFeatures));
		wgpuDeviceGetLimits_ptr = (delegate* unmanaged<WGPUDevice, WGPUSupportedLimits*, bool>) LoadFunctionPointer(nameof(wgpuDeviceGetLimits));
		wgpuDeviceGetQueue_ptr = (delegate* unmanaged<WGPUDevice, WGPUQueue>) LoadFunctionPointer(nameof(wgpuDeviceGetQueue));
		wgpuDeviceHasFeature_ptr = (delegate* unmanaged<WGPUDevice, WGPUFeatureName, bool>) LoadFunctionPointer(nameof(wgpuDeviceHasFeature));
		wgpuDevicePopErrorScope_ptr = (delegate* unmanaged<WGPUDevice, WGPUErrorCallback, void*, bool>) LoadFunctionPointer(nameof(wgpuDevicePopErrorScope));
		wgpuDevicePushErrorScope_ptr = (delegate* unmanaged<WGPUDevice, WGPUErrorFilter, void>) LoadFunctionPointer(nameof(wgpuDevicePushErrorScope));
		wgpuDeviceSetDeviceLostCallback_ptr = (delegate* unmanaged<WGPUDevice, WGPUDeviceLostCallback, void*, void>) LoadFunctionPointer(nameof(wgpuDeviceSetDeviceLostCallback));
		wgpuDeviceSetLabel_ptr = (delegate* unmanaged<WGPUDevice, sbyte*, void>) LoadFunctionPointer(nameof(wgpuDeviceSetLabel));
		wgpuDeviceSetUncapturedErrorCallback_ptr = (delegate* unmanaged<WGPUDevice, WGPUErrorCallback, void*, void>) LoadFunctionPointer(nameof(wgpuDeviceSetUncapturedErrorCallback));
		wgpuInstanceCreateSurface_ptr = (delegate* unmanaged<WGPUInstance, WGPUSurfaceDescriptor*, WGPUSurface>) LoadFunctionPointer(nameof(wgpuInstanceCreateSurface));
		wgpuInstanceProcessEvents_ptr = (delegate* unmanaged<WGPUInstance, void>) LoadFunctionPointer(nameof(wgpuInstanceProcessEvents));
		wgpuInstanceRequestAdapter_ptr = (delegate* unmanaged<WGPUInstance, WGPURequestAdapterOptions*, WGPURequestAdapterCallback, void*, void>) LoadFunctionPointer(nameof(wgpuInstanceRequestAdapter));
		wgpuPipelineLayoutSetLabel_ptr = (delegate* unmanaged<WGPUPipelineLayout, sbyte*, void>) LoadFunctionPointer(nameof(wgpuPipelineLayoutSetLabel));
		wgpuQuerySetDestroy_ptr = (delegate* unmanaged<WGPUQuerySet, void>) LoadFunctionPointer(nameof(wgpuQuerySetDestroy));
		wgpuQuerySetGetCount_ptr = (delegate* unmanaged<WGPUQuerySet, uint>) LoadFunctionPointer(nameof(wgpuQuerySetGetCount));
		wgpuQuerySetGetType_ptr = (delegate* unmanaged<WGPUQuerySet, WGPUQueryType>) LoadFunctionPointer(nameof(wgpuQuerySetGetType));
		wgpuQuerySetSetLabel_ptr = (delegate* unmanaged<WGPUQuerySet, sbyte*, void>) LoadFunctionPointer(nameof(wgpuQuerySetSetLabel));
		wgpuQueueOnSubmittedWorkDone_ptr = (delegate* unmanaged<WGPUQueue, WGPUQueueWorkDoneCallback, void*, void>) LoadFunctionPointer(nameof(wgpuQueueOnSubmittedWorkDone));
		wgpuQueueSetLabel_ptr = (delegate* unmanaged<WGPUQueue, sbyte*, void>) LoadFunctionPointer(nameof(wgpuQueueSetLabel));
		wgpuQueueSubmit_ptr = (delegate* unmanaged<WGPUQueue, int, WGPUCommandBuffer*, void>) LoadFunctionPointer(nameof(wgpuQueueSubmit));
		wgpuQueueWriteBuffer_ptr = (delegate* unmanaged<WGPUQueue, WGPUBuffer, ulong, void*, nuint, void>) LoadFunctionPointer(nameof(wgpuQueueWriteBuffer));
		wgpuQueueWriteTexture_ptr = (delegate* unmanaged<WGPUQueue, WGPUImageCopyTexture*, void*, nuint, WGPUTextureDataLayout*, WGPUExtent3D*, void>) LoadFunctionPointer(nameof(wgpuQueueWriteTexture));
		wgpuRenderBundleEncoderDraw_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, int, int, uint, uint, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderDraw));
		wgpuRenderBundleEncoderDrawIndexed_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, int, int, uint, int, uint, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderDrawIndexed));
		wgpuRenderBundleEncoderDrawIndexedIndirect_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, WGPUBuffer, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderDrawIndexedIndirect));
		wgpuRenderBundleEncoderDrawIndirect_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, WGPUBuffer, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderDrawIndirect));
		wgpuRenderBundleEncoderFinish_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, WGPURenderBundleDescriptor*, WGPURenderBundle>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderFinish));
		wgpuRenderBundleEncoderInsertDebugMarker_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderInsertDebugMarker));
		wgpuRenderBundleEncoderPopDebugGroup_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderPopDebugGroup));
		wgpuRenderBundleEncoderPushDebugGroup_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderPushDebugGroup));
		wgpuRenderBundleEncoderSetBindGroup_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, uint, WGPUBindGroup, int, uint*, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderSetBindGroup));
		wgpuRenderBundleEncoderSetIndexBuffer_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, WGPUBuffer, WGPUIndexFormat, ulong, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderSetIndexBuffer));
		wgpuRenderBundleEncoderSetLabel_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderSetLabel));
		wgpuRenderBundleEncoderSetPipeline_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, WGPURenderPipeline, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderSetPipeline));
		wgpuRenderBundleEncoderSetVertexBuffer_ptr = (delegate* unmanaged<WGPURenderBundleEncoder, uint, WGPUBuffer, ulong, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderBundleEncoderSetVertexBuffer));
		wgpuRenderPassEncoderBeginOcclusionQuery_ptr = (delegate* unmanaged<WGPURenderPassEncoder, uint, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderBeginOcclusionQuery));
		wgpuRenderPassEncoderBeginPipelineStatisticsQuery_ptr = (delegate* unmanaged<WGPURenderPassEncoder, WGPUQuerySet, uint, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderBeginPipelineStatisticsQuery));
		wgpuRenderPassEncoderDraw_ptr = (delegate* unmanaged<WGPURenderPassEncoder, int, int, uint, uint, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderDraw));
		wgpuRenderPassEncoderDrawIndexed_ptr = (delegate* unmanaged<WGPURenderPassEncoder, int, int, uint, int, uint, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderDrawIndexed));
		wgpuRenderPassEncoderDrawIndexedIndirect_ptr = (delegate* unmanaged<WGPURenderPassEncoder, WGPUBuffer, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderDrawIndexedIndirect));
		wgpuRenderPassEncoderDrawIndirect_ptr = (delegate* unmanaged<WGPURenderPassEncoder, WGPUBuffer, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderDrawIndirect));
		wgpuRenderPassEncoderEnd_ptr = (delegate* unmanaged<WGPURenderPassEncoder, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderEnd));
		wgpuRenderPassEncoderEndOcclusionQuery_ptr = (delegate* unmanaged<WGPURenderPassEncoder, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderEndOcclusionQuery));
		wgpuRenderPassEncoderEndPipelineStatisticsQuery_ptr = (delegate* unmanaged<WGPURenderPassEncoder, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderEndPipelineStatisticsQuery));
		wgpuRenderPassEncoderExecuteBundles_ptr = (delegate* unmanaged<WGPURenderPassEncoder, int, WGPURenderBundle*, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderExecuteBundles));
		wgpuRenderPassEncoderInsertDebugMarker_ptr = (delegate* unmanaged<WGPURenderPassEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderInsertDebugMarker));
		wgpuRenderPassEncoderPopDebugGroup_ptr = (delegate* unmanaged<WGPURenderPassEncoder, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderPopDebugGroup));
		wgpuRenderPassEncoderPushDebugGroup_ptr = (delegate* unmanaged<WGPURenderPassEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderPushDebugGroup));
		wgpuRenderPassEncoderSetBindGroup_ptr = (delegate* unmanaged<WGPURenderPassEncoder, uint, WGPUBindGroup, int, uint*, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetBindGroup));
		wgpuRenderPassEncoderSetBlendConstant_ptr = (delegate* unmanaged<WGPURenderPassEncoder, WGPUColor*, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetBlendConstant));
		wgpuRenderPassEncoderSetIndexBuffer_ptr = (delegate* unmanaged<WGPURenderPassEncoder, WGPUBuffer, WGPUIndexFormat, ulong, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetIndexBuffer));
		wgpuRenderPassEncoderSetLabel_ptr = (delegate* unmanaged<WGPURenderPassEncoder, sbyte*, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetLabel));
		wgpuRenderPassEncoderSetPipeline_ptr = (delegate* unmanaged<WGPURenderPassEncoder, WGPURenderPipeline, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetPipeline));
		wgpuRenderPassEncoderSetScissorRect_ptr = (delegate* unmanaged<WGPURenderPassEncoder, uint, uint, uint, uint, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetScissorRect));
		wgpuRenderPassEncoderSetStencilReference_ptr = (delegate* unmanaged<WGPURenderPassEncoder, uint, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetStencilReference));
		wgpuRenderPassEncoderSetVertexBuffer_ptr = (delegate* unmanaged<WGPURenderPassEncoder, uint, WGPUBuffer, ulong, ulong, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetVertexBuffer));
		wgpuRenderPassEncoderSetViewport_ptr = (delegate* unmanaged<WGPURenderPassEncoder, float, float, float, float, float, float, void>) LoadFunctionPointer(nameof(wgpuRenderPassEncoderSetViewport));
		wgpuRenderPipelineGetBindGroupLayout_ptr = (delegate* unmanaged<WGPURenderPipeline, uint, WGPUBindGroupLayout>) LoadFunctionPointer(nameof(wgpuRenderPipelineGetBindGroupLayout));
		wgpuRenderPipelineSetLabel_ptr = (delegate* unmanaged<WGPURenderPipeline, sbyte*, void>) LoadFunctionPointer(nameof(wgpuRenderPipelineSetLabel));
		wgpuSamplerSetLabel_ptr = (delegate* unmanaged<WGPUSampler, sbyte*, void>) LoadFunctionPointer(nameof(wgpuSamplerSetLabel));
		wgpuShaderModuleGetCompilationInfo_ptr = (delegate* unmanaged<WGPUShaderModule, WGPUCompilationInfoCallback, void*, void>) LoadFunctionPointer(nameof(wgpuShaderModuleGetCompilationInfo));
		wgpuShaderModuleSetLabel_ptr = (delegate* unmanaged<WGPUShaderModule, sbyte*, void>) LoadFunctionPointer(nameof(wgpuShaderModuleSetLabel));
		wgpuSurfaceGetPreferredFormat_ptr = (delegate* unmanaged<WGPUSurface, WGPUAdapter, WGPUTextureFormat>) LoadFunctionPointer(nameof(wgpuSurfaceGetPreferredFormat));
		wgpuSwapChainGetCurrentTextureView_ptr = (delegate* unmanaged<WGPUSwapChain, WGPUTextureView>) LoadFunctionPointer(nameof(wgpuSwapChainGetCurrentTextureView));
		wgpuSwapChainPresent_ptr = (delegate* unmanaged<WGPUSwapChain, void>) LoadFunctionPointer(nameof(wgpuSwapChainPresent));
		wgpuTextureCreateView_ptr = (delegate* unmanaged<WGPUTexture, WGPUTextureViewDescriptor*, WGPUTextureView>) LoadFunctionPointer(nameof(wgpuTextureCreateView));
		wgpuTextureDestroy_ptr = (delegate* unmanaged<WGPUTexture, void>) LoadFunctionPointer(nameof(wgpuTextureDestroy));
		wgpuTextureGetDepthOrArrayLayers_ptr = (delegate* unmanaged<WGPUTexture, uint>) LoadFunctionPointer(nameof(wgpuTextureGetDepthOrArrayLayers));
		wgpuTextureGetDimension_ptr = (delegate* unmanaged<WGPUTexture, WGPUTextureDimension>) LoadFunctionPointer(nameof(wgpuTextureGetDimension));
		wgpuTextureGetFormat_ptr = (delegate* unmanaged<WGPUTexture, WGPUTextureFormat>) LoadFunctionPointer(nameof(wgpuTextureGetFormat));
		wgpuTextureGetHeight_ptr = (delegate* unmanaged<WGPUTexture, uint>) LoadFunctionPointer(nameof(wgpuTextureGetHeight));
		wgpuTextureGetMipLevelCount_ptr = (delegate* unmanaged<WGPUTexture, uint>) LoadFunctionPointer(nameof(wgpuTextureGetMipLevelCount));
		wgpuTextureGetSampleCount_ptr = (delegate* unmanaged<WGPUTexture, uint>) LoadFunctionPointer(nameof(wgpuTextureGetSampleCount));
		wgpuTextureGetUsage_ptr = (delegate* unmanaged<WGPUTexture, WGPUTextureUsage>) LoadFunctionPointer(nameof(wgpuTextureGetUsage));
		wgpuTextureGetWidth_ptr = (delegate* unmanaged<WGPUTexture, uint>) LoadFunctionPointer(nameof(wgpuTextureGetWidth));
		wgpuTextureSetLabel_ptr = (delegate* unmanaged<WGPUTexture, sbyte*, void>) LoadFunctionPointer(nameof(wgpuTextureSetLabel));
		wgpuTextureViewSetLabel_ptr = (delegate* unmanaged<WGPUTextureView, sbyte*, void>) LoadFunctionPointer(nameof(wgpuTextureViewSetLabel));
	}
}
