// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Runtime.InteropServices;

namespace WebGPU;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPUBufferMapCallback(WGPUBufferMapAsyncStatus status, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPUCompilationInfoCallback(WGPUCompilationInfoRequestStatus status, WGPUCompilationInfo* compilationInfo, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPUCreateComputePipelineAsyncCallback(WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, byte* message, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPUCreateRenderPipelineAsyncCallback(WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, byte* message, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPUDeviceLostCallback(WGPUDeviceLostReason reason, byte* message, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPUQueueWorkDoneCallback(WGPUQueueWorkDoneStatus status, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPURequestAdapterCallback(WGPURequestAdapterStatus status, WGPUAdapter adapter, byte* message, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPURequestDeviceCallback(WGPURequestDeviceStatus status, WGPUDevice device, byte* message, void* userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void WGPUProcDeviceSetUncapturedErrorCallback(WGPUDevice device, delegate* unmanaged<WGPUErrorType, byte*, void*, void> callback, void* userdata);

public unsafe partial class WebGPU
{
	[LibraryImport(LibraryName, EntryPoint = "wgpuCreateInstance")]
	public static partial WGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuGetProcAddress")]
	public static partial nint wgpuGetProcAddress(WGPUDevice device, byte* procName);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterEnumerateFeatures")]
	public static partial nuint wgpuAdapterEnumerateFeatures(WGPUAdapter adapter, WGPUFeatureName* features);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterGetLimits")]
	public static partial WGPUBool wgpuAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits* limits);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterGetLimits")]
	public static partial WGPUBool wgpuAdapterGetLimits(WGPUAdapter adapter, out WGPUSupportedLimits limits);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterGetProperties")]
	public static partial void wgpuAdapterGetProperties(WGPUAdapter adapter, WGPUAdapterProperties* properties);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterGetProperties")]
	public static partial void wgpuAdapterGetProperties(WGPUAdapter adapter, out WGPUAdapterProperties properties);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterHasFeature")]
	public static partial WGPUBool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterRequestDevice")]
	public static partial void wgpuAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor* descriptor, delegate* unmanaged<WGPURequestDeviceStatus, WGPUDevice, byte*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterReference")]
	public static partial void wgpuAdapterReference(WGPUAdapter adapter);

	[LibraryImport(LibraryName, EntryPoint = "wgpuAdapterRelease")]
	public static partial void wgpuAdapterRelease(WGPUAdapter adapter);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBindGroupSetLabel")]
	public static partial void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, byte* label);

	public static void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuBindGroupSetLabel(bindGroup, pLabel);
		}
	}

	public static void wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, string? label = default)
	{
		wgpuBindGroupSetLabel(bindGroup, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuBindGroupReference")]
	public static partial void wgpuBindGroupReference(WGPUBindGroup bindGroup);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBindGroupRelease")]
	public static partial void wgpuBindGroupRelease(WGPUBindGroup bindGroup);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBindGroupLayoutSetLabel")]
	public static partial void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, byte* label);

	public static void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuBindGroupLayoutSetLabel(bindGroupLayout, pLabel);
		}
	}

	public static void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, string? label = default)
	{
		wgpuBindGroupLayoutSetLabel(bindGroupLayout, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuBindGroupLayoutReference")]
	public static partial void wgpuBindGroupLayoutReference(WGPUBindGroupLayout bindGroupLayout);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBindGroupLayoutRelease")]
	public static partial void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferDestroy")]
	public static partial void wgpuBufferDestroy(WGPUBuffer buffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferGetConstMappedRange")]
	public static partial void* wgpuBufferGetConstMappedRange(WGPUBuffer buffer, nuint offset, nuint size);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferGetMapState")]
	public static partial WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferGetMappedRange")]
	public static partial void* wgpuBufferGetMappedRange(WGPUBuffer buffer, nuint offset, nuint size);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferGetSize")]
	public static partial ulong wgpuBufferGetSize(WGPUBuffer buffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferGetUsage")]
	public static partial WGPUBufferUsage wgpuBufferGetUsage(WGPUBuffer buffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferMapAsync")]
	public static partial void wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapMode mode, nuint offset, nuint size, delegate* unmanaged<WGPUBufferMapAsyncStatus, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferSetLabel")]
	public static partial void wgpuBufferSetLabel(WGPUBuffer buffer, byte* label);

	public static void wgpuBufferSetLabel(WGPUBuffer buffer, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuBufferSetLabel(buffer, pLabel);
		}
	}

	public static void wgpuBufferSetLabel(WGPUBuffer buffer, string? label = default)
	{
		wgpuBufferSetLabel(buffer, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferUnmap")]
	public static partial void wgpuBufferUnmap(WGPUBuffer buffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferReference")]
	public static partial void wgpuBufferReference(WGPUBuffer buffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuBufferRelease")]
	public static partial void wgpuBufferRelease(WGPUBuffer buffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandBufferSetLabel")]
	public static partial void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, byte* label);

	public static void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuCommandBufferSetLabel(commandBuffer, pLabel);
		}
	}

	public static void wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, string? label = default)
	{
		wgpuCommandBufferSetLabel(commandBuffer, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandBufferReference")]
	public static partial void wgpuCommandBufferReference(WGPUCommandBuffer commandBuffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandBufferRelease")]
	public static partial void wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderBeginComputePass")]
	public static partial WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderBeginRenderPass")]
	public static partial WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderClearBuffer")]
	public static partial void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, ulong offset, ulong size);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderCopyBufferToBuffer")]
	public static partial void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, ulong sourceOffset, WGPUBuffer destination, ulong destinationOffset, ulong size);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderCopyBufferToTexture")]
	public static partial void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer* source, WGPUImageCopyTexture* destination, WGPUExtent3D* copySize);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderCopyTextureToBuffer")]
	public static partial void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture* source, WGPUImageCopyBuffer* destination, WGPUExtent3D* copySize);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderCopyTextureToTexture")]
	public static partial void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture* source, WGPUImageCopyTexture* destination, WGPUExtent3D* copySize);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderFinish")]
	public static partial WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderInsertDebugMarker")]
	public static partial void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, byte* markerLabel);

	public static void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, ReadOnlySpan<byte> markerLabel)
	{
		fixed (byte* pMarkerLabel = markerLabel)
		{
			wgpuCommandEncoderInsertDebugMarker(commandEncoder, pMarkerLabel);
		}
	}

	public static void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, string? markerLabel = default)
	{
		wgpuCommandEncoderInsertDebugMarker(commandEncoder, markerLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderPopDebugGroup")]
	public static partial void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderPushDebugGroup")]
	public static partial void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, byte* groupLabel);

	public static void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, ReadOnlySpan<byte> groupLabel)
	{
		fixed (byte* pGroupLabel = groupLabel)
		{
			wgpuCommandEncoderPushDebugGroup(commandEncoder, pGroupLabel);
		}
	}

	public static void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, string? groupLabel = default)
	{
		wgpuCommandEncoderPushDebugGroup(commandEncoder, groupLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderResolveQuerySet")]
	public static partial void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint firstQuery, uint queryCount, WGPUBuffer destination, ulong destinationOffset);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderSetLabel")]
	public static partial void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, byte* label);

	public static void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuCommandEncoderSetLabel(commandEncoder, pLabel);
		}
	}

	public static void wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, string? label = default)
	{
		wgpuCommandEncoderSetLabel(commandEncoder, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderWriteTimestamp")]
	public static partial void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint queryIndex);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderReference")]
	public static partial void wgpuCommandEncoderReference(WGPUCommandEncoder commandEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuCommandEncoderRelease")]
	public static partial void wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderDispatchWorkgroups")]
	public static partial void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint workgroupCountX, uint workgroupCountY, uint workgroupCountZ);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderDispatchWorkgroupsIndirect")]
	public static partial void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderEnd")]
	public static partial void wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderInsertDebugMarker")]
	public static partial void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, byte* markerLabel);

	public static void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, ReadOnlySpan<byte> markerLabel)
	{
		fixed (byte* pMarkerLabel = markerLabel)
		{
			wgpuComputePassEncoderInsertDebugMarker(computePassEncoder, pMarkerLabel);
		}
	}

	public static void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, string? markerLabel = default)
	{
		wgpuComputePassEncoderInsertDebugMarker(computePassEncoder, markerLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderPopDebugGroup")]
	public static partial void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderPushDebugGroup")]
	public static partial void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, byte* groupLabel);

	public static void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, ReadOnlySpan<byte> groupLabel)
	{
		fixed (byte* pGroupLabel = groupLabel)
		{
			wgpuComputePassEncoderPushDebugGroup(computePassEncoder, pGroupLabel);
		}
	}

	public static void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, string? groupLabel = default)
	{
		wgpuComputePassEncoderPushDebugGroup(computePassEncoder, groupLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderSetBindGroup")]
	public static partial void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint groupIndex, WGPUBindGroup group, nuint dynamicOffsetCount, uint* dynamicOffsets);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderSetLabel")]
	public static partial void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, byte* label);

	public static void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuComputePassEncoderSetLabel(computePassEncoder, pLabel);
		}
	}

	public static void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, string? label = default)
	{
		wgpuComputePassEncoderSetLabel(computePassEncoder, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderSetPipeline")]
	public static partial void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderReference")]
	public static partial void wgpuComputePassEncoderReference(WGPUComputePassEncoder computePassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderRelease")]
	public static partial void wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePipelineGetBindGroupLayout")]
	public static partial WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint groupIndex);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePipelineSetLabel")]
	public static partial void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, byte* label);

	public static void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuComputePipelineSetLabel(computePipeline, pLabel);
		}
	}

	public static void wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, string? label = default)
	{
		wgpuComputePipelineSetLabel(computePipeline, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePipelineReference")]
	public static partial void wgpuComputePipelineReference(WGPUComputePipeline computePipeline);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePipelineRelease")]
	public static partial void wgpuComputePipelineRelease(WGPUComputePipeline computePipeline);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateBindGroup")]
	public static partial WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateBindGroupLayout")]
	public static partial WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateBuffer")]
	public static partial WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateCommandEncoder")]
	public static partial WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateComputePipeline")]
	public static partial WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateComputePipelineAsync")]
	public static partial void wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor* descriptor, delegate* unmanaged<WGPUCreatePipelineAsyncStatus, WGPUComputePipeline, byte*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreatePipelineLayout")]
	public static partial WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateQuerySet")]
	public static partial WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateRenderBundleEncoder")]
	public static partial WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateRenderPipeline")]
	public static partial WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateRenderPipelineAsync")]
	public static partial void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor* descriptor, delegate* unmanaged<WGPUCreatePipelineAsyncStatus, WGPURenderPipeline, byte*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateSampler")]
	public static partial WGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateShaderModule")]
	public static partial WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceCreateTexture")]
	public static partial WGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceDestroy")]
	public static partial void wgpuDeviceDestroy(WGPUDevice device);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceEnumerateFeatures")]
	public static partial nuint wgpuDeviceEnumerateFeatures(WGPUDevice device, WGPUFeatureName* features);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceGetLimits")]
	public static partial WGPUBool wgpuDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits* limits);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceGetLimits")]
	public static partial WGPUBool wgpuDeviceGetLimits(WGPUDevice device, out WGPUSupportedLimits limits);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceGetQueue")]
	public static partial WGPUQueue wgpuDeviceGetQueue(WGPUDevice device);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceHasFeature")]
	public static partial WGPUBool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDevicePopErrorScope")]
	public static partial void wgpuDevicePopErrorScope(WGPUDevice device, delegate* unmanaged<WGPUErrorType, byte*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDevicePushErrorScope")]
	public static partial void wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceSetLabel")]
	public static partial void wgpuDeviceSetLabel(WGPUDevice device, byte* label);

	public static void wgpuDeviceSetLabel(WGPUDevice device, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuDeviceSetLabel(device, pLabel);
		}
	}

	public static void wgpuDeviceSetLabel(WGPUDevice device, string? label = default)
	{
		wgpuDeviceSetLabel(device, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceSetUncapturedErrorCallback")]
	public static partial void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice device, delegate* unmanaged<WGPUErrorType, byte*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceReference")]
	public static partial void wgpuDeviceReference(WGPUDevice device);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDeviceRelease")]
	public static partial void wgpuDeviceRelease(WGPUDevice device);

	[LibraryImport(LibraryName, EntryPoint = "wgpuInstanceCreateSurface")]
	public static partial WGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuInstanceProcessEvents")]
	public static partial void wgpuInstanceProcessEvents(WGPUInstance instance);

	[LibraryImport(LibraryName, EntryPoint = "wgpuInstanceRequestAdapter")]
	public static partial void wgpuInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions* options, delegate* unmanaged<WGPURequestAdapterStatus, WGPUAdapter, byte*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuInstanceReference")]
	public static partial void wgpuInstanceReference(WGPUInstance instance);

	[LibraryImport(LibraryName, EntryPoint = "wgpuInstanceRelease")]
	public static partial void wgpuInstanceRelease(WGPUInstance instance);

	[LibraryImport(LibraryName, EntryPoint = "wgpuPipelineLayoutSetLabel")]
	public static partial void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, byte* label);

	public static void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuPipelineLayoutSetLabel(pipelineLayout, pLabel);
		}
	}

	public static void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, string? label = default)
	{
		wgpuPipelineLayoutSetLabel(pipelineLayout, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuPipelineLayoutReference")]
	public static partial void wgpuPipelineLayoutReference(WGPUPipelineLayout pipelineLayout);

	[LibraryImport(LibraryName, EntryPoint = "wgpuPipelineLayoutRelease")]
	public static partial void wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQuerySetDestroy")]
	public static partial void wgpuQuerySetDestroy(WGPUQuerySet querySet);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQuerySetGetCount")]
	public static partial uint wgpuQuerySetGetCount(WGPUQuerySet querySet);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQuerySetGetType")]
	public static partial WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQuerySetSetLabel")]
	public static partial void wgpuQuerySetSetLabel(WGPUQuerySet querySet, byte* label);

	public static void wgpuQuerySetSetLabel(WGPUQuerySet querySet, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuQuerySetSetLabel(querySet, pLabel);
		}
	}

	public static void wgpuQuerySetSetLabel(WGPUQuerySet querySet, string? label = default)
	{
		wgpuQuerySetSetLabel(querySet, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuQuerySetReference")]
	public static partial void wgpuQuerySetReference(WGPUQuerySet querySet);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQuerySetRelease")]
	public static partial void wgpuQuerySetRelease(WGPUQuerySet querySet);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueOnSubmittedWorkDone")]
	public static partial void wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, delegate* unmanaged<WGPUQueueWorkDoneStatus, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueSetLabel")]
	public static partial void wgpuQueueSetLabel(WGPUQueue queue, byte* label);

	public static void wgpuQueueSetLabel(WGPUQueue queue, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuQueueSetLabel(queue, pLabel);
		}
	}

	public static void wgpuQueueSetLabel(WGPUQueue queue, string? label = default)
	{
		wgpuQueueSetLabel(queue, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueSubmit")]
	public static partial void wgpuQueueSubmit(WGPUQueue queue, nuint commandCount, WGPUCommandBuffer* commands);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueWriteBuffer")]
	public static partial void wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, ulong bufferOffset, void* data, nuint size);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueWriteTexture")]
	public static partial void wgpuQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture* destination, void* data, nuint dataSize, WGPUTextureDataLayout* dataLayout, WGPUExtent3D* writeSize);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueReference")]
	public static partial void wgpuQueueReference(WGPUQueue queue);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueRelease")]
	public static partial void wgpuQueueRelease(WGPUQueue queue);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleSetLabel")]
	public static partial void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, byte* label);

	public static void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuRenderBundleSetLabel(renderBundle, pLabel);
		}
	}

	public static void wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, string? label = default)
	{
		wgpuRenderBundleSetLabel(renderBundle, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleReference")]
	public static partial void wgpuRenderBundleReference(WGPURenderBundle renderBundle);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleRelease")]
	public static partial void wgpuRenderBundleRelease(WGPURenderBundle renderBundle);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderDraw")]
	public static partial void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint vertexCount, uint instanceCount = 1, uint firstVertex = 0, uint firstInstance = 0);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderDrawIndexed")]
	public static partial void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint indexCount, uint instanceCount = 1, uint firstIndex = 0, int baseVertex = 0, uint firstInstance = 0);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderDrawIndexedIndirect")]
	public static partial void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderDrawIndirect")]
	public static partial void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderFinish")]
	public static partial WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderInsertDebugMarker")]
	public static partial void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, byte* markerLabel);

	public static void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, ReadOnlySpan<byte> markerLabel)
	{
		fixed (byte* pMarkerLabel = markerLabel)
		{
			wgpuRenderBundleEncoderInsertDebugMarker(renderBundleEncoder, pMarkerLabel);
		}
	}

	public static void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, string? markerLabel = default)
	{
		wgpuRenderBundleEncoderInsertDebugMarker(renderBundleEncoder, markerLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderPopDebugGroup")]
	public static partial void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderPushDebugGroup")]
	public static partial void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, byte* groupLabel);

	public static void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, ReadOnlySpan<byte> groupLabel)
	{
		fixed (byte* pGroupLabel = groupLabel)
		{
			wgpuRenderBundleEncoderPushDebugGroup(renderBundleEncoder, pGroupLabel);
		}
	}

	public static void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, string? groupLabel = default)
	{
		wgpuRenderBundleEncoderPushDebugGroup(renderBundleEncoder, groupLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderSetBindGroup")]
	public static partial void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint groupIndex, WGPUBindGroup group, nuint dynamicOffsetCount, uint* dynamicOffsets);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderSetIndexBuffer")]
	public static partial void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset = 0, ulong size = WGPU_WHOLE_SIZE);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderSetLabel")]
	public static partial void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, byte* label);

	public static void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuRenderBundleEncoderSetLabel(renderBundleEncoder, pLabel);
		}
	}

	public static void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, string? label = default)
	{
		wgpuRenderBundleEncoderSetLabel(renderBundleEncoder, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderSetPipeline")]
	public static partial void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderSetVertexBuffer")]
	public static partial void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint slot, WGPUBuffer buffer, ulong offset = 0, ulong size = WGPU_WHOLE_SIZE);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderReference")]
	public static partial void wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder renderBundleEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderBundleEncoderRelease")]
	public static partial void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderBeginOcclusionQuery")]
	public static partial void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint queryIndex);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderDraw")]
	public static partial void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint vertexCount, uint instanceCount = 1, uint firstVertex = 0, uint firstInstance = 0);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderDrawIndexed")]
	public static partial void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint indexCount, uint instanceCount = 1, uint firstIndex = 0, int baseVertex = 0, uint firstInstance = 0);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderDrawIndexedIndirect")]
	public static partial void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderDrawIndirect")]
	public static partial void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, ulong indirectOffset);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderEnd")]
	public static partial void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderEndOcclusionQuery")]
	public static partial void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderExecuteBundles")]
	public static partial void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, nuint bundleCount, WGPURenderBundle* bundles);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderInsertDebugMarker")]
	public static partial void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, byte* markerLabel);

	public static void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, ReadOnlySpan<byte> markerLabel)
	{
		fixed (byte* pMarkerLabel = markerLabel)
		{
			wgpuRenderPassEncoderInsertDebugMarker(renderPassEncoder, pMarkerLabel);
		}
	}

	public static void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, string? markerLabel = default)
	{
		wgpuRenderPassEncoderInsertDebugMarker(renderPassEncoder, markerLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderPopDebugGroup")]
	public static partial void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderPushDebugGroup")]
	public static partial void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, byte* groupLabel);

	public static void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, ReadOnlySpan<byte> groupLabel)
	{
		fixed (byte* pGroupLabel = groupLabel)
		{
			wgpuRenderPassEncoderPushDebugGroup(renderPassEncoder, pGroupLabel);
		}
	}

	public static void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, string? groupLabel = default)
	{
		wgpuRenderPassEncoderPushDebugGroup(renderPassEncoder, groupLabel.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetBindGroup")]
	public static partial void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint groupIndex, WGPUBindGroup group, nuint dynamicOffsetCount, uint* dynamicOffsets);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetBlendConstant")]
	public static partial void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor* color);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetIndexBuffer")]
	public static partial void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, ulong offset = 0, ulong size = WGPU_WHOLE_SIZE);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetLabel")]
	public static partial void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, byte* label);

	public static void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuRenderPassEncoderSetLabel(renderPassEncoder, pLabel);
		}
	}

	public static void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, string? label = default)
	{
		wgpuRenderPassEncoderSetLabel(renderPassEncoder, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetPipeline")]
	public static partial void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetScissorRect")]
	public static partial void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint x, uint y, uint width, uint height);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetStencilReference")]
	public static partial void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint reference);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetVertexBuffer")]
	public static partial void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint slot, WGPUBuffer buffer, ulong offset = 0, ulong size = WGPU_WHOLE_SIZE);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetViewport")]
	public static partial void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderReference")]
	public static partial void wgpuRenderPassEncoderReference(WGPURenderPassEncoder renderPassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderRelease")]
	public static partial void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPipelineGetBindGroupLayout")]
	public static partial WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint groupIndex);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPipelineSetLabel")]
	public static partial void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, byte* label);

	public static void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuRenderPipelineSetLabel(renderPipeline, pLabel);
		}
	}

	public static void wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, string? label = default)
	{
		wgpuRenderPipelineSetLabel(renderPipeline, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPipelineReference")]
	public static partial void wgpuRenderPipelineReference(WGPURenderPipeline renderPipeline);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPipelineRelease")]
	public static partial void wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSamplerSetLabel")]
	public static partial void wgpuSamplerSetLabel(WGPUSampler sampler, byte* label);

	public static void wgpuSamplerSetLabel(WGPUSampler sampler, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuSamplerSetLabel(sampler, pLabel);
		}
	}

	public static void wgpuSamplerSetLabel(WGPUSampler sampler, string? label = default)
	{
		wgpuSamplerSetLabel(sampler, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuSamplerReference")]
	public static partial void wgpuSamplerReference(WGPUSampler sampler);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSamplerRelease")]
	public static partial void wgpuSamplerRelease(WGPUSampler sampler);

	[LibraryImport(LibraryName, EntryPoint = "wgpuShaderModuleGetCompilationInfo")]
	public static partial void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, delegate* unmanaged<WGPUCompilationInfoRequestStatus, WGPUCompilationInfo*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuShaderModuleSetLabel")]
	public static partial void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, byte* label);

	public static void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuShaderModuleSetLabel(shaderModule, pLabel);
		}
	}

	public static void wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, string? label = default)
	{
		wgpuShaderModuleSetLabel(shaderModule, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuShaderModuleReference")]
	public static partial void wgpuShaderModuleReference(WGPUShaderModule shaderModule);

	[LibraryImport(LibraryName, EntryPoint = "wgpuShaderModuleRelease")]
	public static partial void wgpuShaderModuleRelease(WGPUShaderModule shaderModule);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceConfigure")]
	public static partial void wgpuSurfaceConfigure(WGPUSurface surface, WGPUSurfaceConfiguration* config);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceGetCapabilities")]
	public static partial void wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, WGPUSurfaceCapabilities* capabilities);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceGetCapabilities")]
	public static partial void wgpuSurfaceGetCapabilities(WGPUSurface surface, WGPUAdapter adapter, out WGPUSurfaceCapabilities capabilities);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceGetCurrentTexture")]
	public static partial void wgpuSurfaceGetCurrentTexture(WGPUSurface surface, WGPUSurfaceTexture* surfaceTexture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceGetCurrentTexture")]
	public static partial void wgpuSurfaceGetCurrentTexture(WGPUSurface surface, out WGPUSurfaceTexture surfaceTexture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceGetPreferredFormat")]
	public static partial WGPUTextureFormat wgpuSurfaceGetPreferredFormat(WGPUSurface surface, WGPUAdapter adapter);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfacePresent")]
	public static partial void wgpuSurfacePresent(WGPUSurface surface);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceUnconfigure")]
	public static partial void wgpuSurfaceUnconfigure(WGPUSurface surface);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceReference")]
	public static partial void wgpuSurfaceReference(WGPUSurface surface);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceRelease")]
	public static partial void wgpuSurfaceRelease(WGPUSurface surface);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSurfaceCapabilitiesFreeMembers")]
	public static partial void wgpuSurfaceCapabilitiesFreeMembers(WGPUSurfaceCapabilities capabilities);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureCreateView")]
	public static partial WGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor* descriptor);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureDestroy")]
	public static partial void wgpuTextureDestroy(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetDepthOrArrayLayers")]
	public static partial uint wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetDimension")]
	public static partial WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetFormat")]
	public static partial WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetHeight")]
	public static partial uint wgpuTextureGetHeight(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetMipLevelCount")]
	public static partial uint wgpuTextureGetMipLevelCount(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetSampleCount")]
	public static partial uint wgpuTextureGetSampleCount(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetUsage")]
	public static partial WGPUTextureUsage wgpuTextureGetUsage(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureGetWidth")]
	public static partial uint wgpuTextureGetWidth(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureSetLabel")]
	public static partial void wgpuTextureSetLabel(WGPUTexture texture, byte* label);

	public static void wgpuTextureSetLabel(WGPUTexture texture, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuTextureSetLabel(texture, pLabel);
		}
	}

	public static void wgpuTextureSetLabel(WGPUTexture texture, string? label = default)
	{
		wgpuTextureSetLabel(texture, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureReference")]
	public static partial void wgpuTextureReference(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureRelease")]
	public static partial void wgpuTextureRelease(WGPUTexture texture);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureViewSetLabel")]
	public static partial void wgpuTextureViewSetLabel(WGPUTextureView textureView, byte* label);

	public static void wgpuTextureViewSetLabel(WGPUTextureView textureView, ReadOnlySpan<byte> label)
	{
		fixed (byte* pLabel = label)
		{
			wgpuTextureViewSetLabel(textureView, pLabel);
		}
	}

	public static void wgpuTextureViewSetLabel(WGPUTextureView textureView, string? label = default)
	{
		wgpuTextureViewSetLabel(textureView, label.GetUtf8Span());
	}

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureViewReference")]
	public static partial void wgpuTextureViewReference(WGPUTextureView textureView);

	[LibraryImport(LibraryName, EntryPoint = "wgpuTextureViewRelease")]
	public static partial void wgpuTextureViewRelease(WGPUTextureView textureView);

	[LibraryImport(LibraryName, EntryPoint = "wgpuGenerateReport")]
	public static partial void wgpuGenerateReport(WGPUInstance instance, WGPUGlobalReport* report);

	[LibraryImport(LibraryName, EntryPoint = "wgpuInstanceEnumerateAdapters")]
	public static partial nuint wgpuInstanceEnumerateAdapters(WGPUInstance instance, WGPUInstanceEnumerateAdapterOptions* options, WGPUAdapter* adapters);

	[LibraryImport(LibraryName, EntryPoint = "wgpuQueueSubmitForIndex")]
	public static partial ulong wgpuQueueSubmitForIndex(WGPUQueue queue, nuint commandCount, WGPUCommandBuffer* commands);

	[LibraryImport(LibraryName, EntryPoint = "wgpuDevicePoll")]
	public static partial WGPUBool wgpuDevicePoll(WGPUDevice device, WGPUBool wait, WGPUWrappedSubmissionIndex* wrappedSubmissionIndex);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSetLogCallback")]
	public static partial void wgpuSetLogCallback(delegate* unmanaged<WGPULogLevel, byte*, void*, void> callback, void* userdata);

	[LibraryImport(LibraryName, EntryPoint = "wgpuSetLogLevel")]
	public static partial void wgpuSetLogLevel(WGPULogLevel level);

	[LibraryImport(LibraryName, EntryPoint = "wgpuGetVersion")]
	public static partial uint wgpuGetVersion();

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderSetPushConstants")]
	public static partial void wgpuRenderPassEncoderSetPushConstants(WGPURenderPassEncoder encoder, WGPUShaderStage stages, uint offset, uint sizeBytes, void* data);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderMultiDrawIndirect")]
	public static partial void wgpuRenderPassEncoderMultiDrawIndirect(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, uint count);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderMultiDrawIndexedIndirect")]
	public static partial void wgpuRenderPassEncoderMultiDrawIndexedIndirect(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, uint count);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderMultiDrawIndirectCount")]
	public static partial void wgpuRenderPassEncoderMultiDrawIndirectCount(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, WGPUBuffer count_buffer, ulong count_buffer_offset, uint max_count);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderMultiDrawIndexedIndirectCount")]
	public static partial void wgpuRenderPassEncoderMultiDrawIndexedIndirectCount(WGPURenderPassEncoder encoder, WGPUBuffer buffer, ulong offset, WGPUBuffer count_buffer, ulong count_buffer_offset, uint max_count);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderBeginPipelineStatisticsQuery")]
	public static partial void wgpuComputePassEncoderBeginPipelineStatisticsQuery(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint queryIndex);

	[LibraryImport(LibraryName, EntryPoint = "wgpuComputePassEncoderEndPipelineStatisticsQuery")]
	public static partial void wgpuComputePassEncoderEndPipelineStatisticsQuery(WGPUComputePassEncoder computePassEncoder);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderBeginPipelineStatisticsQuery")]
	public static partial void wgpuRenderPassEncoderBeginPipelineStatisticsQuery(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint queryIndex);

	[LibraryImport(LibraryName, EntryPoint = "wgpuRenderPassEncoderEndPipelineStatisticsQuery")]
	public static partial void wgpuRenderPassEncoderEndPipelineStatisticsQuery(WGPURenderPassEncoder renderPassEncoder);

}
