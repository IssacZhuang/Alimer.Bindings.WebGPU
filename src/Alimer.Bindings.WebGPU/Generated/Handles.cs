// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System.Diagnostics;

namespace Alimer.Bindings.WebGPU;

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUAdapter : IEquatable<WGPUAdapter>
{
	public WGPUAdapter(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUAdapter Null => new(0);
	public static implicit operator WGPUAdapter(nint handle) => new(handle);
	public static bool operator ==(WGPUAdapter left, WGPUAdapter right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUAdapter left, WGPUAdapter right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUAdapter left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUAdapter left, nint right) => left.Handle != right;
	public bool Equals(WGPUAdapter other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUAdapter handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUAdapter)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUBindGroup : IEquatable<WGPUBindGroup>
{
	public WGPUBindGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUBindGroup Null => new(0);
	public static implicit operator WGPUBindGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUBindGroup left, WGPUBindGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUBindGroup left, WGPUBindGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUBindGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUBindGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUBindGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUBindGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUBindGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUBindGroupLayout : IEquatable<WGPUBindGroupLayout>
{
	public WGPUBindGroupLayout(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUBindGroupLayout Null => new(0);
	public static implicit operator WGPUBindGroupLayout(nint handle) => new(handle);
	public static bool operator ==(WGPUBindGroupLayout left, WGPUBindGroupLayout right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUBindGroupLayout left, WGPUBindGroupLayout right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUBindGroupLayout left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUBindGroupLayout left, nint right) => left.Handle != right;
	public bool Equals(WGPUBindGroupLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUBindGroupLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUBindGroupLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUBuffer : IEquatable<WGPUBuffer>
{
	public WGPUBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUBuffer Null => new(0);
	public static implicit operator WGPUBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUBuffer left, WGPUBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUBuffer left, WGPUBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUCommandBuffer : IEquatable<WGPUCommandBuffer>
{
	public WGPUCommandBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUCommandBuffer Null => new(0);
	public static implicit operator WGPUCommandBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUCommandBuffer left, WGPUCommandBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUCommandBuffer left, WGPUCommandBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUCommandBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUCommandBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUCommandBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUCommandBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUCommandBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUCommandEncoder : IEquatable<WGPUCommandEncoder>
{
	public WGPUCommandEncoder(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUCommandEncoder Null => new(0);
	public static implicit operator WGPUCommandEncoder(nint handle) => new(handle);
	public static bool operator ==(WGPUCommandEncoder left, WGPUCommandEncoder right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUCommandEncoder left, WGPUCommandEncoder right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUCommandEncoder left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUCommandEncoder left, nint right) => left.Handle != right;
	public bool Equals(WGPUCommandEncoder other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUCommandEncoder handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUCommandEncoder)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUComputePassEncoder : IEquatable<WGPUComputePassEncoder>
{
	public WGPUComputePassEncoder(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUComputePassEncoder Null => new(0);
	public static implicit operator WGPUComputePassEncoder(nint handle) => new(handle);
	public static bool operator ==(WGPUComputePassEncoder left, WGPUComputePassEncoder right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUComputePassEncoder left, WGPUComputePassEncoder right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUComputePassEncoder left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUComputePassEncoder left, nint right) => left.Handle != right;
	public bool Equals(WGPUComputePassEncoder other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUComputePassEncoder handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUComputePassEncoder)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUComputePipeline : IEquatable<WGPUComputePipeline>
{
	public WGPUComputePipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUComputePipeline Null => new(0);
	public static implicit operator WGPUComputePipeline(nint handle) => new(handle);
	public static bool operator ==(WGPUComputePipeline left, WGPUComputePipeline right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUComputePipeline left, WGPUComputePipeline right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUComputePipeline left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUComputePipeline left, nint right) => left.Handle != right;
	public bool Equals(WGPUComputePipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUComputePipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUComputePipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUDevice : IEquatable<WGPUDevice>
{
	public WGPUDevice(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUDevice Null => new(0);
	public static implicit operator WGPUDevice(nint handle) => new(handle);
	public static bool operator ==(WGPUDevice left, WGPUDevice right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUDevice left, WGPUDevice right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUDevice left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUDevice left, nint right) => left.Handle != right;
	public bool Equals(WGPUDevice other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUDevice handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUDevice)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUInstance : IEquatable<WGPUInstance>
{
	public WGPUInstance(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUInstance Null => new(0);
	public static implicit operator WGPUInstance(nint handle) => new(handle);
	public static bool operator ==(WGPUInstance left, WGPUInstance right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUInstance left, WGPUInstance right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUInstance left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUInstance left, nint right) => left.Handle != right;
	public bool Equals(WGPUInstance other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUInstance handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUInstance)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUPipelineLayout : IEquatable<WGPUPipelineLayout>
{
	public WGPUPipelineLayout(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUPipelineLayout Null => new(0);
	public static implicit operator WGPUPipelineLayout(nint handle) => new(handle);
	public static bool operator ==(WGPUPipelineLayout left, WGPUPipelineLayout right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUPipelineLayout left, WGPUPipelineLayout right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUPipelineLayout left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUPipelineLayout left, nint right) => left.Handle != right;
	public bool Equals(WGPUPipelineLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUPipelineLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUPipelineLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUQuerySet : IEquatable<WGPUQuerySet>
{
	public WGPUQuerySet(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUQuerySet Null => new(0);
	public static implicit operator WGPUQuerySet(nint handle) => new(handle);
	public static bool operator ==(WGPUQuerySet left, WGPUQuerySet right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUQuerySet left, WGPUQuerySet right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUQuerySet left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUQuerySet left, nint right) => left.Handle != right;
	public bool Equals(WGPUQuerySet other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUQuerySet handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUQuerySet)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUQueue : IEquatable<WGPUQueue>
{
	public WGPUQueue(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUQueue Null => new(0);
	public static implicit operator WGPUQueue(nint handle) => new(handle);
	public static bool operator ==(WGPUQueue left, WGPUQueue right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUQueue left, WGPUQueue right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUQueue left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUQueue left, nint right) => left.Handle != right;
	public bool Equals(WGPUQueue other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUQueue handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUQueue)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPURenderBundle : IEquatable<WGPURenderBundle>
{
	public WGPURenderBundle(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPURenderBundle Null => new(0);
	public static implicit operator WGPURenderBundle(nint handle) => new(handle);
	public static bool operator ==(WGPURenderBundle left, WGPURenderBundle right) => left.Handle == right.Handle;
	public static bool operator !=(WGPURenderBundle left, WGPURenderBundle right) => left.Handle != right.Handle;
	public static bool operator ==(WGPURenderBundle left, nint right) => left.Handle == right;
	public static bool operator !=(WGPURenderBundle left, nint right) => left.Handle != right;
	public bool Equals(WGPURenderBundle other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPURenderBundle handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPURenderBundle)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPURenderBundleEncoder : IEquatable<WGPURenderBundleEncoder>
{
	public WGPURenderBundleEncoder(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPURenderBundleEncoder Null => new(0);
	public static implicit operator WGPURenderBundleEncoder(nint handle) => new(handle);
	public static bool operator ==(WGPURenderBundleEncoder left, WGPURenderBundleEncoder right) => left.Handle == right.Handle;
	public static bool operator !=(WGPURenderBundleEncoder left, WGPURenderBundleEncoder right) => left.Handle != right.Handle;
	public static bool operator ==(WGPURenderBundleEncoder left, nint right) => left.Handle == right;
	public static bool operator !=(WGPURenderBundleEncoder left, nint right) => left.Handle != right;
	public bool Equals(WGPURenderBundleEncoder other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPURenderBundleEncoder handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPURenderBundleEncoder)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPURenderPassEncoder : IEquatable<WGPURenderPassEncoder>
{
	public WGPURenderPassEncoder(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPURenderPassEncoder Null => new(0);
	public static implicit operator WGPURenderPassEncoder(nint handle) => new(handle);
	public static bool operator ==(WGPURenderPassEncoder left, WGPURenderPassEncoder right) => left.Handle == right.Handle;
	public static bool operator !=(WGPURenderPassEncoder left, WGPURenderPassEncoder right) => left.Handle != right.Handle;
	public static bool operator ==(WGPURenderPassEncoder left, nint right) => left.Handle == right;
	public static bool operator !=(WGPURenderPassEncoder left, nint right) => left.Handle != right;
	public bool Equals(WGPURenderPassEncoder other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPURenderPassEncoder handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPURenderPassEncoder)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPURenderPipeline : IEquatable<WGPURenderPipeline>
{
	public WGPURenderPipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPURenderPipeline Null => new(0);
	public static implicit operator WGPURenderPipeline(nint handle) => new(handle);
	public static bool operator ==(WGPURenderPipeline left, WGPURenderPipeline right) => left.Handle == right.Handle;
	public static bool operator !=(WGPURenderPipeline left, WGPURenderPipeline right) => left.Handle != right.Handle;
	public static bool operator ==(WGPURenderPipeline left, nint right) => left.Handle == right;
	public static bool operator !=(WGPURenderPipeline left, nint right) => left.Handle != right;
	public bool Equals(WGPURenderPipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPURenderPipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPURenderPipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUSampler : IEquatable<WGPUSampler>
{
	public WGPUSampler(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUSampler Null => new(0);
	public static implicit operator WGPUSampler(nint handle) => new(handle);
	public static bool operator ==(WGPUSampler left, WGPUSampler right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUSampler left, WGPUSampler right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUSampler left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUSampler left, nint right) => left.Handle != right;
	public bool Equals(WGPUSampler other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUSampler handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUSampler)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUShaderModule : IEquatable<WGPUShaderModule>
{
	public WGPUShaderModule(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUShaderModule Null => new(0);
	public static implicit operator WGPUShaderModule(nint handle) => new(handle);
	public static bool operator ==(WGPUShaderModule left, WGPUShaderModule right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUShaderModule left, WGPUShaderModule right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUShaderModule left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUShaderModule left, nint right) => left.Handle != right;
	public bool Equals(WGPUShaderModule other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUShaderModule handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUShaderModule)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUSurface : IEquatable<WGPUSurface>
{
	public WGPUSurface(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUSurface Null => new(0);
	public static implicit operator WGPUSurface(nint handle) => new(handle);
	public static bool operator ==(WGPUSurface left, WGPUSurface right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUSurface left, WGPUSurface right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUSurface left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUSurface left, nint right) => left.Handle != right;
	public bool Equals(WGPUSurface other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUSurface handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUSurface)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUSwapChain : IEquatable<WGPUSwapChain>
{
	public WGPUSwapChain(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUSwapChain Null => new(0);
	public static implicit operator WGPUSwapChain(nint handle) => new(handle);
	public static bool operator ==(WGPUSwapChain left, WGPUSwapChain right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUSwapChain left, WGPUSwapChain right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUSwapChain left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUSwapChain left, nint right) => left.Handle != right;
	public bool Equals(WGPUSwapChain other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUSwapChain handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUSwapChain)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUTexture : IEquatable<WGPUTexture>
{
	public WGPUTexture(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUTexture Null => new(0);
	public static implicit operator WGPUTexture(nint handle) => new(handle);
	public static bool operator ==(WGPUTexture left, WGPUTexture right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUTexture left, WGPUTexture right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUTexture left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUTexture left, nint right) => left.Handle != right;
	public bool Equals(WGPUTexture other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUTexture handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUTexture)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUTextureView : IEquatable<WGPUTextureView>
{
	public WGPUTextureView(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUTextureView Null => new(0);
	public static implicit operator WGPUTextureView(nint handle) => new(handle);
	public static bool operator ==(WGPUTextureView left, WGPUTextureView right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUTextureView left, WGPUTextureView right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUTextureView left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUTextureView left, nint right) => left.Handle != right;
	public bool Equals(WGPUTextureView other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUTextureView handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUTextureView)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUBufferMapCallback : IEquatable<WGPUBufferMapCallback>
{
	public WGPUBufferMapCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUBufferMapCallback Null => new(0);
	public static implicit operator WGPUBufferMapCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUBufferMapCallback left, WGPUBufferMapCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUBufferMapCallback left, WGPUBufferMapCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUBufferMapCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUBufferMapCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUBufferMapCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUBufferMapCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUBufferMapCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUCompilationInfoCallback : IEquatable<WGPUCompilationInfoCallback>
{
	public WGPUCompilationInfoCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUCompilationInfoCallback Null => new(0);
	public static implicit operator WGPUCompilationInfoCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUCompilationInfoCallback left, WGPUCompilationInfoCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUCompilationInfoCallback left, WGPUCompilationInfoCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUCompilationInfoCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUCompilationInfoCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUCompilationInfoCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUCompilationInfoCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUCompilationInfoCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUCreateComputePipelineAsyncCallback : IEquatable<WGPUCreateComputePipelineAsyncCallback>
{
	public WGPUCreateComputePipelineAsyncCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUCreateComputePipelineAsyncCallback Null => new(0);
	public static implicit operator WGPUCreateComputePipelineAsyncCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUCreateComputePipelineAsyncCallback left, WGPUCreateComputePipelineAsyncCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUCreateComputePipelineAsyncCallback left, WGPUCreateComputePipelineAsyncCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUCreateComputePipelineAsyncCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUCreateComputePipelineAsyncCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUCreateComputePipelineAsyncCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUCreateComputePipelineAsyncCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUCreateComputePipelineAsyncCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUCreateRenderPipelineAsyncCallback : IEquatable<WGPUCreateRenderPipelineAsyncCallback>
{
	public WGPUCreateRenderPipelineAsyncCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUCreateRenderPipelineAsyncCallback Null => new(0);
	public static implicit operator WGPUCreateRenderPipelineAsyncCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUCreateRenderPipelineAsyncCallback left, WGPUCreateRenderPipelineAsyncCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUCreateRenderPipelineAsyncCallback left, WGPUCreateRenderPipelineAsyncCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUCreateRenderPipelineAsyncCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUCreateRenderPipelineAsyncCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUCreateRenderPipelineAsyncCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUCreateRenderPipelineAsyncCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUCreateRenderPipelineAsyncCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUDeviceLostCallback : IEquatable<WGPUDeviceLostCallback>
{
	public WGPUDeviceLostCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUDeviceLostCallback Null => new(0);
	public static implicit operator WGPUDeviceLostCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUDeviceLostCallback left, WGPUDeviceLostCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUDeviceLostCallback left, WGPUDeviceLostCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUDeviceLostCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUDeviceLostCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUDeviceLostCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUDeviceLostCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUDeviceLostCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUErrorCallback : IEquatable<WGPUErrorCallback>
{
	public WGPUErrorCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUErrorCallback Null => new(0);
	public static implicit operator WGPUErrorCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUErrorCallback left, WGPUErrorCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUErrorCallback left, WGPUErrorCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUErrorCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUErrorCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUErrorCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUErrorCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUErrorCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProc : IEquatable<WGPUProc>
{
	public WGPUProc(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProc Null => new(0);
	public static implicit operator WGPUProc(nint handle) => new(handle);
	public static bool operator ==(WGPUProc left, WGPUProc right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProc left, WGPUProc right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProc left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProc left, nint right) => left.Handle != right;
	public bool Equals(WGPUProc other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProc handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProc)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUQueueWorkDoneCallback : IEquatable<WGPUQueueWorkDoneCallback>
{
	public WGPUQueueWorkDoneCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUQueueWorkDoneCallback Null => new(0);
	public static implicit operator WGPUQueueWorkDoneCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUQueueWorkDoneCallback left, WGPUQueueWorkDoneCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUQueueWorkDoneCallback left, WGPUQueueWorkDoneCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUQueueWorkDoneCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUQueueWorkDoneCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUQueueWorkDoneCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUQueueWorkDoneCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUQueueWorkDoneCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPURequestAdapterCallback : IEquatable<WGPURequestAdapterCallback>
{
	public WGPURequestAdapterCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPURequestAdapterCallback Null => new(0);
	public static implicit operator WGPURequestAdapterCallback(nint handle) => new(handle);
	public static bool operator ==(WGPURequestAdapterCallback left, WGPURequestAdapterCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPURequestAdapterCallback left, WGPURequestAdapterCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPURequestAdapterCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPURequestAdapterCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPURequestAdapterCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPURequestAdapterCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPURequestAdapterCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPURequestDeviceCallback : IEquatable<WGPURequestDeviceCallback>
{
	public WGPURequestDeviceCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPURequestDeviceCallback Null => new(0);
	public static implicit operator WGPURequestDeviceCallback(nint handle) => new(handle);
	public static bool operator ==(WGPURequestDeviceCallback left, WGPURequestDeviceCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPURequestDeviceCallback left, WGPURequestDeviceCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPURequestDeviceCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPURequestDeviceCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPURequestDeviceCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPURequestDeviceCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPURequestDeviceCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCreateInstance : IEquatable<WGPUProcCreateInstance>
{
	public WGPUProcCreateInstance(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCreateInstance Null => new(0);
	public static implicit operator WGPUProcCreateInstance(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCreateInstance left, WGPUProcCreateInstance right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCreateInstance left, WGPUProcCreateInstance right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCreateInstance left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCreateInstance left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCreateInstance other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCreateInstance handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCreateInstance)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcGetProcAddress : IEquatable<WGPUProcGetProcAddress>
{
	public WGPUProcGetProcAddress(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcGetProcAddress Null => new(0);
	public static implicit operator WGPUProcGetProcAddress(nint handle) => new(handle);
	public static bool operator ==(WGPUProcGetProcAddress left, WGPUProcGetProcAddress right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcGetProcAddress left, WGPUProcGetProcAddress right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcGetProcAddress left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcGetProcAddress left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcGetProcAddress other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcGetProcAddress handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcGetProcAddress)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcAdapterEnumerateFeatures : IEquatable<WGPUProcAdapterEnumerateFeatures>
{
	public WGPUProcAdapterEnumerateFeatures(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcAdapterEnumerateFeatures Null => new(0);
	public static implicit operator WGPUProcAdapterEnumerateFeatures(nint handle) => new(handle);
	public static bool operator ==(WGPUProcAdapterEnumerateFeatures left, WGPUProcAdapterEnumerateFeatures right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcAdapterEnumerateFeatures left, WGPUProcAdapterEnumerateFeatures right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcAdapterEnumerateFeatures left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcAdapterEnumerateFeatures left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcAdapterEnumerateFeatures other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcAdapterEnumerateFeatures handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcAdapterEnumerateFeatures)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcAdapterGetLimits : IEquatable<WGPUProcAdapterGetLimits>
{
	public WGPUProcAdapterGetLimits(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcAdapterGetLimits Null => new(0);
	public static implicit operator WGPUProcAdapterGetLimits(nint handle) => new(handle);
	public static bool operator ==(WGPUProcAdapterGetLimits left, WGPUProcAdapterGetLimits right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcAdapterGetLimits left, WGPUProcAdapterGetLimits right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcAdapterGetLimits left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcAdapterGetLimits left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcAdapterGetLimits other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcAdapterGetLimits handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcAdapterGetLimits)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcAdapterGetProperties : IEquatable<WGPUProcAdapterGetProperties>
{
	public WGPUProcAdapterGetProperties(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcAdapterGetProperties Null => new(0);
	public static implicit operator WGPUProcAdapterGetProperties(nint handle) => new(handle);
	public static bool operator ==(WGPUProcAdapterGetProperties left, WGPUProcAdapterGetProperties right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcAdapterGetProperties left, WGPUProcAdapterGetProperties right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcAdapterGetProperties left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcAdapterGetProperties left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcAdapterGetProperties other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcAdapterGetProperties handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcAdapterGetProperties)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcAdapterHasFeature : IEquatable<WGPUProcAdapterHasFeature>
{
	public WGPUProcAdapterHasFeature(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcAdapterHasFeature Null => new(0);
	public static implicit operator WGPUProcAdapterHasFeature(nint handle) => new(handle);
	public static bool operator ==(WGPUProcAdapterHasFeature left, WGPUProcAdapterHasFeature right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcAdapterHasFeature left, WGPUProcAdapterHasFeature right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcAdapterHasFeature left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcAdapterHasFeature left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcAdapterHasFeature other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcAdapterHasFeature handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcAdapterHasFeature)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcAdapterRequestDevice : IEquatable<WGPUProcAdapterRequestDevice>
{
	public WGPUProcAdapterRequestDevice(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcAdapterRequestDevice Null => new(0);
	public static implicit operator WGPUProcAdapterRequestDevice(nint handle) => new(handle);
	public static bool operator ==(WGPUProcAdapterRequestDevice left, WGPUProcAdapterRequestDevice right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcAdapterRequestDevice left, WGPUProcAdapterRequestDevice right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcAdapterRequestDevice left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcAdapterRequestDevice left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcAdapterRequestDevice other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcAdapterRequestDevice handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcAdapterRequestDevice)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBindGroupSetLabel : IEquatable<WGPUProcBindGroupSetLabel>
{
	public WGPUProcBindGroupSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBindGroupSetLabel Null => new(0);
	public static implicit operator WGPUProcBindGroupSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBindGroupSetLabel left, WGPUProcBindGroupSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBindGroupSetLabel left, WGPUProcBindGroupSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBindGroupSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBindGroupSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBindGroupSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBindGroupSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBindGroupSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBindGroupLayoutSetLabel : IEquatable<WGPUProcBindGroupLayoutSetLabel>
{
	public WGPUProcBindGroupLayoutSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBindGroupLayoutSetLabel Null => new(0);
	public static implicit operator WGPUProcBindGroupLayoutSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBindGroupLayoutSetLabel left, WGPUProcBindGroupLayoutSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBindGroupLayoutSetLabel left, WGPUProcBindGroupLayoutSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBindGroupLayoutSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBindGroupLayoutSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBindGroupLayoutSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBindGroupLayoutSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBindGroupLayoutSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferDestroy : IEquatable<WGPUProcBufferDestroy>
{
	public WGPUProcBufferDestroy(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferDestroy Null => new(0);
	public static implicit operator WGPUProcBufferDestroy(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferDestroy left, WGPUProcBufferDestroy right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferDestroy left, WGPUProcBufferDestroy right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferDestroy left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferDestroy left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferDestroy other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferDestroy handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferDestroy)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferGetConstMappedRange : IEquatable<WGPUProcBufferGetConstMappedRange>
{
	public WGPUProcBufferGetConstMappedRange(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferGetConstMappedRange Null => new(0);
	public static implicit operator WGPUProcBufferGetConstMappedRange(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferGetConstMappedRange left, WGPUProcBufferGetConstMappedRange right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferGetConstMappedRange left, WGPUProcBufferGetConstMappedRange right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferGetConstMappedRange left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferGetConstMappedRange left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferGetConstMappedRange other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferGetConstMappedRange handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferGetConstMappedRange)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferGetMapState : IEquatable<WGPUProcBufferGetMapState>
{
	public WGPUProcBufferGetMapState(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferGetMapState Null => new(0);
	public static implicit operator WGPUProcBufferGetMapState(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferGetMapState left, WGPUProcBufferGetMapState right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferGetMapState left, WGPUProcBufferGetMapState right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferGetMapState left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferGetMapState left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferGetMapState other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferGetMapState handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferGetMapState)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferGetMappedRange : IEquatable<WGPUProcBufferGetMappedRange>
{
	public WGPUProcBufferGetMappedRange(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferGetMappedRange Null => new(0);
	public static implicit operator WGPUProcBufferGetMappedRange(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferGetMappedRange left, WGPUProcBufferGetMappedRange right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferGetMappedRange left, WGPUProcBufferGetMappedRange right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferGetMappedRange left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferGetMappedRange left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferGetMappedRange other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferGetMappedRange handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferGetMappedRange)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferGetSize : IEquatable<WGPUProcBufferGetSize>
{
	public WGPUProcBufferGetSize(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferGetSize Null => new(0);
	public static implicit operator WGPUProcBufferGetSize(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferGetSize left, WGPUProcBufferGetSize right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferGetSize left, WGPUProcBufferGetSize right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferGetSize left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferGetSize left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferGetSize other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferGetSize handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferGetSize)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferGetUsage : IEquatable<WGPUProcBufferGetUsage>
{
	public WGPUProcBufferGetUsage(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferGetUsage Null => new(0);
	public static implicit operator WGPUProcBufferGetUsage(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferGetUsage left, WGPUProcBufferGetUsage right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferGetUsage left, WGPUProcBufferGetUsage right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferGetUsage left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferGetUsage left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferGetUsage other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferGetUsage handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferGetUsage)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferMapAsync : IEquatable<WGPUProcBufferMapAsync>
{
	public WGPUProcBufferMapAsync(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferMapAsync Null => new(0);
	public static implicit operator WGPUProcBufferMapAsync(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferMapAsync left, WGPUProcBufferMapAsync right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferMapAsync left, WGPUProcBufferMapAsync right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferMapAsync left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferMapAsync left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferMapAsync other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferMapAsync handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferMapAsync)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferSetLabel : IEquatable<WGPUProcBufferSetLabel>
{
	public WGPUProcBufferSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferSetLabel Null => new(0);
	public static implicit operator WGPUProcBufferSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferSetLabel left, WGPUProcBufferSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferSetLabel left, WGPUProcBufferSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcBufferUnmap : IEquatable<WGPUProcBufferUnmap>
{
	public WGPUProcBufferUnmap(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcBufferUnmap Null => new(0);
	public static implicit operator WGPUProcBufferUnmap(nint handle) => new(handle);
	public static bool operator ==(WGPUProcBufferUnmap left, WGPUProcBufferUnmap right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcBufferUnmap left, WGPUProcBufferUnmap right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcBufferUnmap left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcBufferUnmap left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcBufferUnmap other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcBufferUnmap handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcBufferUnmap)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandBufferSetLabel : IEquatable<WGPUProcCommandBufferSetLabel>
{
	public WGPUProcCommandBufferSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandBufferSetLabel Null => new(0);
	public static implicit operator WGPUProcCommandBufferSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandBufferSetLabel left, WGPUProcCommandBufferSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandBufferSetLabel left, WGPUProcCommandBufferSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandBufferSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandBufferSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandBufferSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandBufferSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandBufferSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderBeginComputePass : IEquatable<WGPUProcCommandEncoderBeginComputePass>
{
	public WGPUProcCommandEncoderBeginComputePass(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderBeginComputePass Null => new(0);
	public static implicit operator WGPUProcCommandEncoderBeginComputePass(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderBeginComputePass left, WGPUProcCommandEncoderBeginComputePass right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderBeginComputePass left, WGPUProcCommandEncoderBeginComputePass right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderBeginComputePass left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderBeginComputePass left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderBeginComputePass other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderBeginComputePass handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderBeginComputePass)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderBeginRenderPass : IEquatable<WGPUProcCommandEncoderBeginRenderPass>
{
	public WGPUProcCommandEncoderBeginRenderPass(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderBeginRenderPass Null => new(0);
	public static implicit operator WGPUProcCommandEncoderBeginRenderPass(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderBeginRenderPass left, WGPUProcCommandEncoderBeginRenderPass right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderBeginRenderPass left, WGPUProcCommandEncoderBeginRenderPass right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderBeginRenderPass left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderBeginRenderPass left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderBeginRenderPass other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderBeginRenderPass handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderBeginRenderPass)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderClearBuffer : IEquatable<WGPUProcCommandEncoderClearBuffer>
{
	public WGPUProcCommandEncoderClearBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderClearBuffer Null => new(0);
	public static implicit operator WGPUProcCommandEncoderClearBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderClearBuffer left, WGPUProcCommandEncoderClearBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderClearBuffer left, WGPUProcCommandEncoderClearBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderClearBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderClearBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderClearBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderClearBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderClearBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderCopyBufferToBuffer : IEquatable<WGPUProcCommandEncoderCopyBufferToBuffer>
{
	public WGPUProcCommandEncoderCopyBufferToBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderCopyBufferToBuffer Null => new(0);
	public static implicit operator WGPUProcCommandEncoderCopyBufferToBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderCopyBufferToBuffer left, WGPUProcCommandEncoderCopyBufferToBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderCopyBufferToBuffer left, WGPUProcCommandEncoderCopyBufferToBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderCopyBufferToBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderCopyBufferToBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderCopyBufferToBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderCopyBufferToBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderCopyBufferToBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderCopyBufferToTexture : IEquatable<WGPUProcCommandEncoderCopyBufferToTexture>
{
	public WGPUProcCommandEncoderCopyBufferToTexture(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderCopyBufferToTexture Null => new(0);
	public static implicit operator WGPUProcCommandEncoderCopyBufferToTexture(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderCopyBufferToTexture left, WGPUProcCommandEncoderCopyBufferToTexture right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderCopyBufferToTexture left, WGPUProcCommandEncoderCopyBufferToTexture right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderCopyBufferToTexture left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderCopyBufferToTexture left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderCopyBufferToTexture other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderCopyBufferToTexture handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderCopyBufferToTexture)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderCopyTextureToBuffer : IEquatable<WGPUProcCommandEncoderCopyTextureToBuffer>
{
	public WGPUProcCommandEncoderCopyTextureToBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderCopyTextureToBuffer Null => new(0);
	public static implicit operator WGPUProcCommandEncoderCopyTextureToBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderCopyTextureToBuffer left, WGPUProcCommandEncoderCopyTextureToBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderCopyTextureToBuffer left, WGPUProcCommandEncoderCopyTextureToBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderCopyTextureToBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderCopyTextureToBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderCopyTextureToBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderCopyTextureToBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderCopyTextureToBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderCopyTextureToTexture : IEquatable<WGPUProcCommandEncoderCopyTextureToTexture>
{
	public WGPUProcCommandEncoderCopyTextureToTexture(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderCopyTextureToTexture Null => new(0);
	public static implicit operator WGPUProcCommandEncoderCopyTextureToTexture(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderCopyTextureToTexture left, WGPUProcCommandEncoderCopyTextureToTexture right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderCopyTextureToTexture left, WGPUProcCommandEncoderCopyTextureToTexture right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderCopyTextureToTexture left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderCopyTextureToTexture left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderCopyTextureToTexture other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderCopyTextureToTexture handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderCopyTextureToTexture)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderFinish : IEquatable<WGPUProcCommandEncoderFinish>
{
	public WGPUProcCommandEncoderFinish(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderFinish Null => new(0);
	public static implicit operator WGPUProcCommandEncoderFinish(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderFinish left, WGPUProcCommandEncoderFinish right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderFinish left, WGPUProcCommandEncoderFinish right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderFinish left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderFinish left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderFinish other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderFinish handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderFinish)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderInsertDebugMarker : IEquatable<WGPUProcCommandEncoderInsertDebugMarker>
{
	public WGPUProcCommandEncoderInsertDebugMarker(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderInsertDebugMarker Null => new(0);
	public static implicit operator WGPUProcCommandEncoderInsertDebugMarker(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderInsertDebugMarker left, WGPUProcCommandEncoderInsertDebugMarker right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderInsertDebugMarker left, WGPUProcCommandEncoderInsertDebugMarker right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderInsertDebugMarker left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderInsertDebugMarker left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderInsertDebugMarker other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderInsertDebugMarker handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderInsertDebugMarker)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderPopDebugGroup : IEquatable<WGPUProcCommandEncoderPopDebugGroup>
{
	public WGPUProcCommandEncoderPopDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderPopDebugGroup Null => new(0);
	public static implicit operator WGPUProcCommandEncoderPopDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderPopDebugGroup left, WGPUProcCommandEncoderPopDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderPopDebugGroup left, WGPUProcCommandEncoderPopDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderPopDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderPopDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderPopDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderPopDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderPopDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderPushDebugGroup : IEquatable<WGPUProcCommandEncoderPushDebugGroup>
{
	public WGPUProcCommandEncoderPushDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderPushDebugGroup Null => new(0);
	public static implicit operator WGPUProcCommandEncoderPushDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderPushDebugGroup left, WGPUProcCommandEncoderPushDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderPushDebugGroup left, WGPUProcCommandEncoderPushDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderPushDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderPushDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderPushDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderPushDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderPushDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderResolveQuerySet : IEquatable<WGPUProcCommandEncoderResolveQuerySet>
{
	public WGPUProcCommandEncoderResolveQuerySet(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderResolveQuerySet Null => new(0);
	public static implicit operator WGPUProcCommandEncoderResolveQuerySet(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderResolveQuerySet left, WGPUProcCommandEncoderResolveQuerySet right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderResolveQuerySet left, WGPUProcCommandEncoderResolveQuerySet right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderResolveQuerySet left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderResolveQuerySet left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderResolveQuerySet other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderResolveQuerySet handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderResolveQuerySet)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderSetLabel : IEquatable<WGPUProcCommandEncoderSetLabel>
{
	public WGPUProcCommandEncoderSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderSetLabel Null => new(0);
	public static implicit operator WGPUProcCommandEncoderSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderSetLabel left, WGPUProcCommandEncoderSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderSetLabel left, WGPUProcCommandEncoderSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcCommandEncoderWriteTimestamp : IEquatable<WGPUProcCommandEncoderWriteTimestamp>
{
	public WGPUProcCommandEncoderWriteTimestamp(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcCommandEncoderWriteTimestamp Null => new(0);
	public static implicit operator WGPUProcCommandEncoderWriteTimestamp(nint handle) => new(handle);
	public static bool operator ==(WGPUProcCommandEncoderWriteTimestamp left, WGPUProcCommandEncoderWriteTimestamp right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcCommandEncoderWriteTimestamp left, WGPUProcCommandEncoderWriteTimestamp right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcCommandEncoderWriteTimestamp left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcCommandEncoderWriteTimestamp left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcCommandEncoderWriteTimestamp other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcCommandEncoderWriteTimestamp handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcCommandEncoderWriteTimestamp)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderBeginPipelineStatisticsQuery : IEquatable<WGPUProcComputePassEncoderBeginPipelineStatisticsQuery>
{
	public WGPUProcComputePassEncoderBeginPipelineStatisticsQuery(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderBeginPipelineStatisticsQuery Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderBeginPipelineStatisticsQuery(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery left, WGPUProcComputePassEncoderBeginPipelineStatisticsQuery right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery left, WGPUProcComputePassEncoderBeginPipelineStatisticsQuery right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderBeginPipelineStatisticsQuery handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderBeginPipelineStatisticsQuery)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderDispatchWorkgroups : IEquatable<WGPUProcComputePassEncoderDispatchWorkgroups>
{
	public WGPUProcComputePassEncoderDispatchWorkgroups(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderDispatchWorkgroups Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderDispatchWorkgroups(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderDispatchWorkgroups left, WGPUProcComputePassEncoderDispatchWorkgroups right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderDispatchWorkgroups left, WGPUProcComputePassEncoderDispatchWorkgroups right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderDispatchWorkgroups left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderDispatchWorkgroups left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderDispatchWorkgroups other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderDispatchWorkgroups handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderDispatchWorkgroups)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderDispatchWorkgroupsIndirect : IEquatable<WGPUProcComputePassEncoderDispatchWorkgroupsIndirect>
{
	public WGPUProcComputePassEncoderDispatchWorkgroupsIndirect(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderDispatchWorkgroupsIndirect Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderDispatchWorkgroupsIndirect(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderDispatchWorkgroupsIndirect left, WGPUProcComputePassEncoderDispatchWorkgroupsIndirect right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderDispatchWorkgroupsIndirect left, WGPUProcComputePassEncoderDispatchWorkgroupsIndirect right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderDispatchWorkgroupsIndirect left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderDispatchWorkgroupsIndirect left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderDispatchWorkgroupsIndirect other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderDispatchWorkgroupsIndirect handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderDispatchWorkgroupsIndirect)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderEnd : IEquatable<WGPUProcComputePassEncoderEnd>
{
	public WGPUProcComputePassEncoderEnd(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderEnd Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderEnd(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderEnd left, WGPUProcComputePassEncoderEnd right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderEnd left, WGPUProcComputePassEncoderEnd right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderEnd left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderEnd left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderEnd other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderEnd handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderEnd)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderEndPipelineStatisticsQuery : IEquatable<WGPUProcComputePassEncoderEndPipelineStatisticsQuery>
{
	public WGPUProcComputePassEncoderEndPipelineStatisticsQuery(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderEndPipelineStatisticsQuery Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderEndPipelineStatisticsQuery(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderEndPipelineStatisticsQuery left, WGPUProcComputePassEncoderEndPipelineStatisticsQuery right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderEndPipelineStatisticsQuery left, WGPUProcComputePassEncoderEndPipelineStatisticsQuery right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderEndPipelineStatisticsQuery left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderEndPipelineStatisticsQuery left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderEndPipelineStatisticsQuery other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderEndPipelineStatisticsQuery handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderEndPipelineStatisticsQuery)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderInsertDebugMarker : IEquatable<WGPUProcComputePassEncoderInsertDebugMarker>
{
	public WGPUProcComputePassEncoderInsertDebugMarker(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderInsertDebugMarker Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderInsertDebugMarker(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderInsertDebugMarker left, WGPUProcComputePassEncoderInsertDebugMarker right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderInsertDebugMarker left, WGPUProcComputePassEncoderInsertDebugMarker right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderInsertDebugMarker left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderInsertDebugMarker left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderInsertDebugMarker other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderInsertDebugMarker handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderInsertDebugMarker)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderPopDebugGroup : IEquatable<WGPUProcComputePassEncoderPopDebugGroup>
{
	public WGPUProcComputePassEncoderPopDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderPopDebugGroup Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderPopDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderPopDebugGroup left, WGPUProcComputePassEncoderPopDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderPopDebugGroup left, WGPUProcComputePassEncoderPopDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderPopDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderPopDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderPopDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderPopDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderPopDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderPushDebugGroup : IEquatable<WGPUProcComputePassEncoderPushDebugGroup>
{
	public WGPUProcComputePassEncoderPushDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderPushDebugGroup Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderPushDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderPushDebugGroup left, WGPUProcComputePassEncoderPushDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderPushDebugGroup left, WGPUProcComputePassEncoderPushDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderPushDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderPushDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderPushDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderPushDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderPushDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderSetBindGroup : IEquatable<WGPUProcComputePassEncoderSetBindGroup>
{
	public WGPUProcComputePassEncoderSetBindGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderSetBindGroup Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderSetBindGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderSetBindGroup left, WGPUProcComputePassEncoderSetBindGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderSetBindGroup left, WGPUProcComputePassEncoderSetBindGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderSetBindGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderSetBindGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderSetBindGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderSetBindGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderSetBindGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderSetLabel : IEquatable<WGPUProcComputePassEncoderSetLabel>
{
	public WGPUProcComputePassEncoderSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderSetLabel Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderSetLabel left, WGPUProcComputePassEncoderSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderSetLabel left, WGPUProcComputePassEncoderSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePassEncoderSetPipeline : IEquatable<WGPUProcComputePassEncoderSetPipeline>
{
	public WGPUProcComputePassEncoderSetPipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePassEncoderSetPipeline Null => new(0);
	public static implicit operator WGPUProcComputePassEncoderSetPipeline(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePassEncoderSetPipeline left, WGPUProcComputePassEncoderSetPipeline right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePassEncoderSetPipeline left, WGPUProcComputePassEncoderSetPipeline right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePassEncoderSetPipeline left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePassEncoderSetPipeline left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePassEncoderSetPipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePassEncoderSetPipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePassEncoderSetPipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePipelineGetBindGroupLayout : IEquatable<WGPUProcComputePipelineGetBindGroupLayout>
{
	public WGPUProcComputePipelineGetBindGroupLayout(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePipelineGetBindGroupLayout Null => new(0);
	public static implicit operator WGPUProcComputePipelineGetBindGroupLayout(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePipelineGetBindGroupLayout left, WGPUProcComputePipelineGetBindGroupLayout right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePipelineGetBindGroupLayout left, WGPUProcComputePipelineGetBindGroupLayout right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePipelineGetBindGroupLayout left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePipelineGetBindGroupLayout left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePipelineGetBindGroupLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePipelineGetBindGroupLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePipelineGetBindGroupLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcComputePipelineSetLabel : IEquatable<WGPUProcComputePipelineSetLabel>
{
	public WGPUProcComputePipelineSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcComputePipelineSetLabel Null => new(0);
	public static implicit operator WGPUProcComputePipelineSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcComputePipelineSetLabel left, WGPUProcComputePipelineSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcComputePipelineSetLabel left, WGPUProcComputePipelineSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcComputePipelineSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcComputePipelineSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcComputePipelineSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcComputePipelineSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcComputePipelineSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateBindGroup : IEquatable<WGPUProcDeviceCreateBindGroup>
{
	public WGPUProcDeviceCreateBindGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateBindGroup Null => new(0);
	public static implicit operator WGPUProcDeviceCreateBindGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateBindGroup left, WGPUProcDeviceCreateBindGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateBindGroup left, WGPUProcDeviceCreateBindGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateBindGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateBindGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateBindGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateBindGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateBindGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateBindGroupLayout : IEquatable<WGPUProcDeviceCreateBindGroupLayout>
{
	public WGPUProcDeviceCreateBindGroupLayout(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateBindGroupLayout Null => new(0);
	public static implicit operator WGPUProcDeviceCreateBindGroupLayout(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateBindGroupLayout left, WGPUProcDeviceCreateBindGroupLayout right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateBindGroupLayout left, WGPUProcDeviceCreateBindGroupLayout right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateBindGroupLayout left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateBindGroupLayout left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateBindGroupLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateBindGroupLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateBindGroupLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateBuffer : IEquatable<WGPUProcDeviceCreateBuffer>
{
	public WGPUProcDeviceCreateBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateBuffer Null => new(0);
	public static implicit operator WGPUProcDeviceCreateBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateBuffer left, WGPUProcDeviceCreateBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateBuffer left, WGPUProcDeviceCreateBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateCommandEncoder : IEquatable<WGPUProcDeviceCreateCommandEncoder>
{
	public WGPUProcDeviceCreateCommandEncoder(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateCommandEncoder Null => new(0);
	public static implicit operator WGPUProcDeviceCreateCommandEncoder(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateCommandEncoder left, WGPUProcDeviceCreateCommandEncoder right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateCommandEncoder left, WGPUProcDeviceCreateCommandEncoder right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateCommandEncoder left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateCommandEncoder left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateCommandEncoder other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateCommandEncoder handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateCommandEncoder)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateComputePipeline : IEquatable<WGPUProcDeviceCreateComputePipeline>
{
	public WGPUProcDeviceCreateComputePipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateComputePipeline Null => new(0);
	public static implicit operator WGPUProcDeviceCreateComputePipeline(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateComputePipeline left, WGPUProcDeviceCreateComputePipeline right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateComputePipeline left, WGPUProcDeviceCreateComputePipeline right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateComputePipeline left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateComputePipeline left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateComputePipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateComputePipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateComputePipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateComputePipelineAsync : IEquatable<WGPUProcDeviceCreateComputePipelineAsync>
{
	public WGPUProcDeviceCreateComputePipelineAsync(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateComputePipelineAsync Null => new(0);
	public static implicit operator WGPUProcDeviceCreateComputePipelineAsync(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateComputePipelineAsync left, WGPUProcDeviceCreateComputePipelineAsync right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateComputePipelineAsync left, WGPUProcDeviceCreateComputePipelineAsync right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateComputePipelineAsync left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateComputePipelineAsync left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateComputePipelineAsync other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateComputePipelineAsync handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateComputePipelineAsync)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreatePipelineLayout : IEquatable<WGPUProcDeviceCreatePipelineLayout>
{
	public WGPUProcDeviceCreatePipelineLayout(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreatePipelineLayout Null => new(0);
	public static implicit operator WGPUProcDeviceCreatePipelineLayout(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreatePipelineLayout left, WGPUProcDeviceCreatePipelineLayout right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreatePipelineLayout left, WGPUProcDeviceCreatePipelineLayout right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreatePipelineLayout left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreatePipelineLayout left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreatePipelineLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreatePipelineLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreatePipelineLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateQuerySet : IEquatable<WGPUProcDeviceCreateQuerySet>
{
	public WGPUProcDeviceCreateQuerySet(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateQuerySet Null => new(0);
	public static implicit operator WGPUProcDeviceCreateQuerySet(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateQuerySet left, WGPUProcDeviceCreateQuerySet right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateQuerySet left, WGPUProcDeviceCreateQuerySet right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateQuerySet left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateQuerySet left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateQuerySet other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateQuerySet handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateQuerySet)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateRenderBundleEncoder : IEquatable<WGPUProcDeviceCreateRenderBundleEncoder>
{
	public WGPUProcDeviceCreateRenderBundleEncoder(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateRenderBundleEncoder Null => new(0);
	public static implicit operator WGPUProcDeviceCreateRenderBundleEncoder(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateRenderBundleEncoder left, WGPUProcDeviceCreateRenderBundleEncoder right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateRenderBundleEncoder left, WGPUProcDeviceCreateRenderBundleEncoder right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateRenderBundleEncoder left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateRenderBundleEncoder left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateRenderBundleEncoder other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateRenderBundleEncoder handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateRenderBundleEncoder)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateRenderPipeline : IEquatable<WGPUProcDeviceCreateRenderPipeline>
{
	public WGPUProcDeviceCreateRenderPipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateRenderPipeline Null => new(0);
	public static implicit operator WGPUProcDeviceCreateRenderPipeline(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateRenderPipeline left, WGPUProcDeviceCreateRenderPipeline right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateRenderPipeline left, WGPUProcDeviceCreateRenderPipeline right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateRenderPipeline left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateRenderPipeline left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateRenderPipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateRenderPipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateRenderPipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateRenderPipelineAsync : IEquatable<WGPUProcDeviceCreateRenderPipelineAsync>
{
	public WGPUProcDeviceCreateRenderPipelineAsync(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateRenderPipelineAsync Null => new(0);
	public static implicit operator WGPUProcDeviceCreateRenderPipelineAsync(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateRenderPipelineAsync left, WGPUProcDeviceCreateRenderPipelineAsync right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateRenderPipelineAsync left, WGPUProcDeviceCreateRenderPipelineAsync right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateRenderPipelineAsync left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateRenderPipelineAsync left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateRenderPipelineAsync other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateRenderPipelineAsync handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateRenderPipelineAsync)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateSampler : IEquatable<WGPUProcDeviceCreateSampler>
{
	public WGPUProcDeviceCreateSampler(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateSampler Null => new(0);
	public static implicit operator WGPUProcDeviceCreateSampler(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateSampler left, WGPUProcDeviceCreateSampler right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateSampler left, WGPUProcDeviceCreateSampler right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateSampler left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateSampler left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateSampler other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateSampler handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateSampler)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateShaderModule : IEquatable<WGPUProcDeviceCreateShaderModule>
{
	public WGPUProcDeviceCreateShaderModule(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateShaderModule Null => new(0);
	public static implicit operator WGPUProcDeviceCreateShaderModule(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateShaderModule left, WGPUProcDeviceCreateShaderModule right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateShaderModule left, WGPUProcDeviceCreateShaderModule right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateShaderModule left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateShaderModule left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateShaderModule other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateShaderModule handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateShaderModule)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateSwapChain : IEquatable<WGPUProcDeviceCreateSwapChain>
{
	public WGPUProcDeviceCreateSwapChain(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateSwapChain Null => new(0);
	public static implicit operator WGPUProcDeviceCreateSwapChain(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateSwapChain left, WGPUProcDeviceCreateSwapChain right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateSwapChain left, WGPUProcDeviceCreateSwapChain right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateSwapChain left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateSwapChain left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateSwapChain other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateSwapChain handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateSwapChain)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceCreateTexture : IEquatable<WGPUProcDeviceCreateTexture>
{
	public WGPUProcDeviceCreateTexture(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceCreateTexture Null => new(0);
	public static implicit operator WGPUProcDeviceCreateTexture(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceCreateTexture left, WGPUProcDeviceCreateTexture right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceCreateTexture left, WGPUProcDeviceCreateTexture right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceCreateTexture left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceCreateTexture left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceCreateTexture other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceCreateTexture handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceCreateTexture)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceDestroy : IEquatable<WGPUProcDeviceDestroy>
{
	public WGPUProcDeviceDestroy(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceDestroy Null => new(0);
	public static implicit operator WGPUProcDeviceDestroy(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceDestroy left, WGPUProcDeviceDestroy right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceDestroy left, WGPUProcDeviceDestroy right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceDestroy left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceDestroy left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceDestroy other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceDestroy handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceDestroy)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceEnumerateFeatures : IEquatable<WGPUProcDeviceEnumerateFeatures>
{
	public WGPUProcDeviceEnumerateFeatures(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceEnumerateFeatures Null => new(0);
	public static implicit operator WGPUProcDeviceEnumerateFeatures(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceEnumerateFeatures left, WGPUProcDeviceEnumerateFeatures right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceEnumerateFeatures left, WGPUProcDeviceEnumerateFeatures right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceEnumerateFeatures left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceEnumerateFeatures left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceEnumerateFeatures other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceEnumerateFeatures handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceEnumerateFeatures)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceGetLimits : IEquatable<WGPUProcDeviceGetLimits>
{
	public WGPUProcDeviceGetLimits(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceGetLimits Null => new(0);
	public static implicit operator WGPUProcDeviceGetLimits(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceGetLimits left, WGPUProcDeviceGetLimits right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceGetLimits left, WGPUProcDeviceGetLimits right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceGetLimits left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceGetLimits left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceGetLimits other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceGetLimits handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceGetLimits)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceGetQueue : IEquatable<WGPUProcDeviceGetQueue>
{
	public WGPUProcDeviceGetQueue(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceGetQueue Null => new(0);
	public static implicit operator WGPUProcDeviceGetQueue(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceGetQueue left, WGPUProcDeviceGetQueue right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceGetQueue left, WGPUProcDeviceGetQueue right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceGetQueue left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceGetQueue left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceGetQueue other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceGetQueue handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceGetQueue)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceHasFeature : IEquatable<WGPUProcDeviceHasFeature>
{
	public WGPUProcDeviceHasFeature(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceHasFeature Null => new(0);
	public static implicit operator WGPUProcDeviceHasFeature(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceHasFeature left, WGPUProcDeviceHasFeature right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceHasFeature left, WGPUProcDeviceHasFeature right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceHasFeature left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceHasFeature left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceHasFeature other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceHasFeature handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceHasFeature)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDevicePopErrorScope : IEquatable<WGPUProcDevicePopErrorScope>
{
	public WGPUProcDevicePopErrorScope(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDevicePopErrorScope Null => new(0);
	public static implicit operator WGPUProcDevicePopErrorScope(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDevicePopErrorScope left, WGPUProcDevicePopErrorScope right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDevicePopErrorScope left, WGPUProcDevicePopErrorScope right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDevicePopErrorScope left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDevicePopErrorScope left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDevicePopErrorScope other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDevicePopErrorScope handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDevicePopErrorScope)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDevicePushErrorScope : IEquatable<WGPUProcDevicePushErrorScope>
{
	public WGPUProcDevicePushErrorScope(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDevicePushErrorScope Null => new(0);
	public static implicit operator WGPUProcDevicePushErrorScope(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDevicePushErrorScope left, WGPUProcDevicePushErrorScope right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDevicePushErrorScope left, WGPUProcDevicePushErrorScope right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDevicePushErrorScope left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDevicePushErrorScope left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDevicePushErrorScope other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDevicePushErrorScope handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDevicePushErrorScope)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceSetDeviceLostCallback : IEquatable<WGPUProcDeviceSetDeviceLostCallback>
{
	public WGPUProcDeviceSetDeviceLostCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceSetDeviceLostCallback Null => new(0);
	public static implicit operator WGPUProcDeviceSetDeviceLostCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceSetDeviceLostCallback left, WGPUProcDeviceSetDeviceLostCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceSetDeviceLostCallback left, WGPUProcDeviceSetDeviceLostCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceSetDeviceLostCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceSetDeviceLostCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceSetDeviceLostCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceSetDeviceLostCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceSetDeviceLostCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceSetLabel : IEquatable<WGPUProcDeviceSetLabel>
{
	public WGPUProcDeviceSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceSetLabel Null => new(0);
	public static implicit operator WGPUProcDeviceSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceSetLabel left, WGPUProcDeviceSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceSetLabel left, WGPUProcDeviceSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcDeviceSetUncapturedErrorCallback : IEquatable<WGPUProcDeviceSetUncapturedErrorCallback>
{
	public WGPUProcDeviceSetUncapturedErrorCallback(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcDeviceSetUncapturedErrorCallback Null => new(0);
	public static implicit operator WGPUProcDeviceSetUncapturedErrorCallback(nint handle) => new(handle);
	public static bool operator ==(WGPUProcDeviceSetUncapturedErrorCallback left, WGPUProcDeviceSetUncapturedErrorCallback right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcDeviceSetUncapturedErrorCallback left, WGPUProcDeviceSetUncapturedErrorCallback right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcDeviceSetUncapturedErrorCallback left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcDeviceSetUncapturedErrorCallback left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcDeviceSetUncapturedErrorCallback other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcDeviceSetUncapturedErrorCallback handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcDeviceSetUncapturedErrorCallback)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcInstanceCreateSurface : IEquatable<WGPUProcInstanceCreateSurface>
{
	public WGPUProcInstanceCreateSurface(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcInstanceCreateSurface Null => new(0);
	public static implicit operator WGPUProcInstanceCreateSurface(nint handle) => new(handle);
	public static bool operator ==(WGPUProcInstanceCreateSurface left, WGPUProcInstanceCreateSurface right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcInstanceCreateSurface left, WGPUProcInstanceCreateSurface right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcInstanceCreateSurface left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcInstanceCreateSurface left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcInstanceCreateSurface other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcInstanceCreateSurface handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcInstanceCreateSurface)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcInstanceProcessEvents : IEquatable<WGPUProcInstanceProcessEvents>
{
	public WGPUProcInstanceProcessEvents(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcInstanceProcessEvents Null => new(0);
	public static implicit operator WGPUProcInstanceProcessEvents(nint handle) => new(handle);
	public static bool operator ==(WGPUProcInstanceProcessEvents left, WGPUProcInstanceProcessEvents right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcInstanceProcessEvents left, WGPUProcInstanceProcessEvents right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcInstanceProcessEvents left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcInstanceProcessEvents left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcInstanceProcessEvents other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcInstanceProcessEvents handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcInstanceProcessEvents)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcInstanceRequestAdapter : IEquatable<WGPUProcInstanceRequestAdapter>
{
	public WGPUProcInstanceRequestAdapter(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcInstanceRequestAdapter Null => new(0);
	public static implicit operator WGPUProcInstanceRequestAdapter(nint handle) => new(handle);
	public static bool operator ==(WGPUProcInstanceRequestAdapter left, WGPUProcInstanceRequestAdapter right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcInstanceRequestAdapter left, WGPUProcInstanceRequestAdapter right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcInstanceRequestAdapter left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcInstanceRequestAdapter left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcInstanceRequestAdapter other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcInstanceRequestAdapter handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcInstanceRequestAdapter)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcPipelineLayoutSetLabel : IEquatable<WGPUProcPipelineLayoutSetLabel>
{
	public WGPUProcPipelineLayoutSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcPipelineLayoutSetLabel Null => new(0);
	public static implicit operator WGPUProcPipelineLayoutSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcPipelineLayoutSetLabel left, WGPUProcPipelineLayoutSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcPipelineLayoutSetLabel left, WGPUProcPipelineLayoutSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcPipelineLayoutSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcPipelineLayoutSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcPipelineLayoutSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcPipelineLayoutSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcPipelineLayoutSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQuerySetDestroy : IEquatable<WGPUProcQuerySetDestroy>
{
	public WGPUProcQuerySetDestroy(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQuerySetDestroy Null => new(0);
	public static implicit operator WGPUProcQuerySetDestroy(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQuerySetDestroy left, WGPUProcQuerySetDestroy right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQuerySetDestroy left, WGPUProcQuerySetDestroy right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQuerySetDestroy left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQuerySetDestroy left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQuerySetDestroy other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQuerySetDestroy handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQuerySetDestroy)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQuerySetGetCount : IEquatable<WGPUProcQuerySetGetCount>
{
	public WGPUProcQuerySetGetCount(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQuerySetGetCount Null => new(0);
	public static implicit operator WGPUProcQuerySetGetCount(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQuerySetGetCount left, WGPUProcQuerySetGetCount right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQuerySetGetCount left, WGPUProcQuerySetGetCount right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQuerySetGetCount left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQuerySetGetCount left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQuerySetGetCount other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQuerySetGetCount handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQuerySetGetCount)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQuerySetGetType : IEquatable<WGPUProcQuerySetGetType>
{
	public WGPUProcQuerySetGetType(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQuerySetGetType Null => new(0);
	public static implicit operator WGPUProcQuerySetGetType(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQuerySetGetType left, WGPUProcQuerySetGetType right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQuerySetGetType left, WGPUProcQuerySetGetType right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQuerySetGetType left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQuerySetGetType left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQuerySetGetType other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQuerySetGetType handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQuerySetGetType)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQuerySetSetLabel : IEquatable<WGPUProcQuerySetSetLabel>
{
	public WGPUProcQuerySetSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQuerySetSetLabel Null => new(0);
	public static implicit operator WGPUProcQuerySetSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQuerySetSetLabel left, WGPUProcQuerySetSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQuerySetSetLabel left, WGPUProcQuerySetSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQuerySetSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQuerySetSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQuerySetSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQuerySetSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQuerySetSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQueueOnSubmittedWorkDone : IEquatable<WGPUProcQueueOnSubmittedWorkDone>
{
	public WGPUProcQueueOnSubmittedWorkDone(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQueueOnSubmittedWorkDone Null => new(0);
	public static implicit operator WGPUProcQueueOnSubmittedWorkDone(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQueueOnSubmittedWorkDone left, WGPUProcQueueOnSubmittedWorkDone right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQueueOnSubmittedWorkDone left, WGPUProcQueueOnSubmittedWorkDone right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQueueOnSubmittedWorkDone left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQueueOnSubmittedWorkDone left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQueueOnSubmittedWorkDone other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQueueOnSubmittedWorkDone handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQueueOnSubmittedWorkDone)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQueueSetLabel : IEquatable<WGPUProcQueueSetLabel>
{
	public WGPUProcQueueSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQueueSetLabel Null => new(0);
	public static implicit operator WGPUProcQueueSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQueueSetLabel left, WGPUProcQueueSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQueueSetLabel left, WGPUProcQueueSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQueueSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQueueSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQueueSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQueueSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQueueSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQueueSubmit : IEquatable<WGPUProcQueueSubmit>
{
	public WGPUProcQueueSubmit(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQueueSubmit Null => new(0);
	public static implicit operator WGPUProcQueueSubmit(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQueueSubmit left, WGPUProcQueueSubmit right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQueueSubmit left, WGPUProcQueueSubmit right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQueueSubmit left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQueueSubmit left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQueueSubmit other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQueueSubmit handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQueueSubmit)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQueueWriteBuffer : IEquatable<WGPUProcQueueWriteBuffer>
{
	public WGPUProcQueueWriteBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQueueWriteBuffer Null => new(0);
	public static implicit operator WGPUProcQueueWriteBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQueueWriteBuffer left, WGPUProcQueueWriteBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQueueWriteBuffer left, WGPUProcQueueWriteBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQueueWriteBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQueueWriteBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQueueWriteBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQueueWriteBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQueueWriteBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcQueueWriteTexture : IEquatable<WGPUProcQueueWriteTexture>
{
	public WGPUProcQueueWriteTexture(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcQueueWriteTexture Null => new(0);
	public static implicit operator WGPUProcQueueWriteTexture(nint handle) => new(handle);
	public static bool operator ==(WGPUProcQueueWriteTexture left, WGPUProcQueueWriteTexture right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcQueueWriteTexture left, WGPUProcQueueWriteTexture right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcQueueWriteTexture left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcQueueWriteTexture left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcQueueWriteTexture other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcQueueWriteTexture handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcQueueWriteTexture)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderDraw : IEquatable<WGPUProcRenderBundleEncoderDraw>
{
	public WGPUProcRenderBundleEncoderDraw(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderDraw Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderDraw(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderDraw left, WGPUProcRenderBundleEncoderDraw right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderDraw left, WGPUProcRenderBundleEncoderDraw right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderDraw left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderDraw left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderDraw other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderDraw handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderDraw)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderDrawIndexed : IEquatable<WGPUProcRenderBundleEncoderDrawIndexed>
{
	public WGPUProcRenderBundleEncoderDrawIndexed(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderDrawIndexed Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderDrawIndexed(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderDrawIndexed left, WGPUProcRenderBundleEncoderDrawIndexed right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderDrawIndexed left, WGPUProcRenderBundleEncoderDrawIndexed right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderDrawIndexed left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderDrawIndexed left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderDrawIndexed other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderDrawIndexed handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderDrawIndexed)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderDrawIndexedIndirect : IEquatable<WGPUProcRenderBundleEncoderDrawIndexedIndirect>
{
	public WGPUProcRenderBundleEncoderDrawIndexedIndirect(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderDrawIndexedIndirect Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderDrawIndexedIndirect(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderDrawIndexedIndirect left, WGPUProcRenderBundleEncoderDrawIndexedIndirect right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderDrawIndexedIndirect left, WGPUProcRenderBundleEncoderDrawIndexedIndirect right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderDrawIndexedIndirect left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderDrawIndexedIndirect left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderDrawIndexedIndirect other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderDrawIndexedIndirect handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderDrawIndexedIndirect)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderDrawIndirect : IEquatable<WGPUProcRenderBundleEncoderDrawIndirect>
{
	public WGPUProcRenderBundleEncoderDrawIndirect(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderDrawIndirect Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderDrawIndirect(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderDrawIndirect left, WGPUProcRenderBundleEncoderDrawIndirect right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderDrawIndirect left, WGPUProcRenderBundleEncoderDrawIndirect right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderDrawIndirect left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderDrawIndirect left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderDrawIndirect other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderDrawIndirect handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderDrawIndirect)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderFinish : IEquatable<WGPUProcRenderBundleEncoderFinish>
{
	public WGPUProcRenderBundleEncoderFinish(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderFinish Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderFinish(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderFinish left, WGPUProcRenderBundleEncoderFinish right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderFinish left, WGPUProcRenderBundleEncoderFinish right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderFinish left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderFinish left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderFinish other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderFinish handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderFinish)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderInsertDebugMarker : IEquatable<WGPUProcRenderBundleEncoderInsertDebugMarker>
{
	public WGPUProcRenderBundleEncoderInsertDebugMarker(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderInsertDebugMarker Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderInsertDebugMarker(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderInsertDebugMarker left, WGPUProcRenderBundleEncoderInsertDebugMarker right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderInsertDebugMarker left, WGPUProcRenderBundleEncoderInsertDebugMarker right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderInsertDebugMarker left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderInsertDebugMarker left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderInsertDebugMarker other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderInsertDebugMarker handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderInsertDebugMarker)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderPopDebugGroup : IEquatable<WGPUProcRenderBundleEncoderPopDebugGroup>
{
	public WGPUProcRenderBundleEncoderPopDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderPopDebugGroup Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderPopDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderPopDebugGroup left, WGPUProcRenderBundleEncoderPopDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderPopDebugGroup left, WGPUProcRenderBundleEncoderPopDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderPopDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderPopDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderPopDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderPopDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderPopDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderPushDebugGroup : IEquatable<WGPUProcRenderBundleEncoderPushDebugGroup>
{
	public WGPUProcRenderBundleEncoderPushDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderPushDebugGroup Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderPushDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderPushDebugGroup left, WGPUProcRenderBundleEncoderPushDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderPushDebugGroup left, WGPUProcRenderBundleEncoderPushDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderPushDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderPushDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderPushDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderPushDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderPushDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderSetBindGroup : IEquatable<WGPUProcRenderBundleEncoderSetBindGroup>
{
	public WGPUProcRenderBundleEncoderSetBindGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderSetBindGroup Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderSetBindGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderSetBindGroup left, WGPUProcRenderBundleEncoderSetBindGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetBindGroup left, WGPUProcRenderBundleEncoderSetBindGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderSetBindGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetBindGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderSetBindGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderSetBindGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderSetBindGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderSetIndexBuffer : IEquatable<WGPUProcRenderBundleEncoderSetIndexBuffer>
{
	public WGPUProcRenderBundleEncoderSetIndexBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderSetIndexBuffer Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderSetIndexBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderSetIndexBuffer left, WGPUProcRenderBundleEncoderSetIndexBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetIndexBuffer left, WGPUProcRenderBundleEncoderSetIndexBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderSetIndexBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetIndexBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderSetIndexBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderSetIndexBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderSetIndexBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderSetLabel : IEquatable<WGPUProcRenderBundleEncoderSetLabel>
{
	public WGPUProcRenderBundleEncoderSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderSetLabel Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderSetLabel left, WGPUProcRenderBundleEncoderSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetLabel left, WGPUProcRenderBundleEncoderSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderSetPipeline : IEquatable<WGPUProcRenderBundleEncoderSetPipeline>
{
	public WGPUProcRenderBundleEncoderSetPipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderSetPipeline Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderSetPipeline(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderSetPipeline left, WGPUProcRenderBundleEncoderSetPipeline right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetPipeline left, WGPUProcRenderBundleEncoderSetPipeline right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderSetPipeline left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetPipeline left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderSetPipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderSetPipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderSetPipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderBundleEncoderSetVertexBuffer : IEquatable<WGPUProcRenderBundleEncoderSetVertexBuffer>
{
	public WGPUProcRenderBundleEncoderSetVertexBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderBundleEncoderSetVertexBuffer Null => new(0);
	public static implicit operator WGPUProcRenderBundleEncoderSetVertexBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderBundleEncoderSetVertexBuffer left, WGPUProcRenderBundleEncoderSetVertexBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetVertexBuffer left, WGPUProcRenderBundleEncoderSetVertexBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderBundleEncoderSetVertexBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderBundleEncoderSetVertexBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderBundleEncoderSetVertexBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderBundleEncoderSetVertexBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderBundleEncoderSetVertexBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderBeginOcclusionQuery : IEquatable<WGPUProcRenderPassEncoderBeginOcclusionQuery>
{
	public WGPUProcRenderPassEncoderBeginOcclusionQuery(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderBeginOcclusionQuery Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderBeginOcclusionQuery(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderBeginOcclusionQuery left, WGPUProcRenderPassEncoderBeginOcclusionQuery right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderBeginOcclusionQuery left, WGPUProcRenderPassEncoderBeginOcclusionQuery right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderBeginOcclusionQuery left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderBeginOcclusionQuery left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderBeginOcclusionQuery other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderBeginOcclusionQuery handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderBeginOcclusionQuery)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery : IEquatable<WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery>
{
	public WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery left, WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery left, WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderBeginPipelineStatisticsQuery)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderDraw : IEquatable<WGPUProcRenderPassEncoderDraw>
{
	public WGPUProcRenderPassEncoderDraw(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderDraw Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderDraw(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderDraw left, WGPUProcRenderPassEncoderDraw right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderDraw left, WGPUProcRenderPassEncoderDraw right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderDraw left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderDraw left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderDraw other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderDraw handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderDraw)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderDrawIndexed : IEquatable<WGPUProcRenderPassEncoderDrawIndexed>
{
	public WGPUProcRenderPassEncoderDrawIndexed(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderDrawIndexed Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderDrawIndexed(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderDrawIndexed left, WGPUProcRenderPassEncoderDrawIndexed right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderDrawIndexed left, WGPUProcRenderPassEncoderDrawIndexed right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderDrawIndexed left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderDrawIndexed left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderDrawIndexed other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderDrawIndexed handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderDrawIndexed)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderDrawIndexedIndirect : IEquatable<WGPUProcRenderPassEncoderDrawIndexedIndirect>
{
	public WGPUProcRenderPassEncoderDrawIndexedIndirect(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderDrawIndexedIndirect Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderDrawIndexedIndirect(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderDrawIndexedIndirect left, WGPUProcRenderPassEncoderDrawIndexedIndirect right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderDrawIndexedIndirect left, WGPUProcRenderPassEncoderDrawIndexedIndirect right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderDrawIndexedIndirect left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderDrawIndexedIndirect left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderDrawIndexedIndirect other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderDrawIndexedIndirect handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderDrawIndexedIndirect)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderDrawIndirect : IEquatable<WGPUProcRenderPassEncoderDrawIndirect>
{
	public WGPUProcRenderPassEncoderDrawIndirect(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderDrawIndirect Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderDrawIndirect(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderDrawIndirect left, WGPUProcRenderPassEncoderDrawIndirect right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderDrawIndirect left, WGPUProcRenderPassEncoderDrawIndirect right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderDrawIndirect left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderDrawIndirect left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderDrawIndirect other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderDrawIndirect handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderDrawIndirect)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderEnd : IEquatable<WGPUProcRenderPassEncoderEnd>
{
	public WGPUProcRenderPassEncoderEnd(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderEnd Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderEnd(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderEnd left, WGPUProcRenderPassEncoderEnd right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderEnd left, WGPUProcRenderPassEncoderEnd right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderEnd left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderEnd left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderEnd other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderEnd handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderEnd)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderEndOcclusionQuery : IEquatable<WGPUProcRenderPassEncoderEndOcclusionQuery>
{
	public WGPUProcRenderPassEncoderEndOcclusionQuery(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderEndOcclusionQuery Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderEndOcclusionQuery(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderEndOcclusionQuery left, WGPUProcRenderPassEncoderEndOcclusionQuery right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderEndOcclusionQuery left, WGPUProcRenderPassEncoderEndOcclusionQuery right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderEndOcclusionQuery left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderEndOcclusionQuery left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderEndOcclusionQuery other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderEndOcclusionQuery handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderEndOcclusionQuery)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderEndPipelineStatisticsQuery : IEquatable<WGPUProcRenderPassEncoderEndPipelineStatisticsQuery>
{
	public WGPUProcRenderPassEncoderEndPipelineStatisticsQuery(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderEndPipelineStatisticsQuery Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderEndPipelineStatisticsQuery(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery left, WGPUProcRenderPassEncoderEndPipelineStatisticsQuery right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery left, WGPUProcRenderPassEncoderEndPipelineStatisticsQuery right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderEndPipelineStatisticsQuery handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderEndPipelineStatisticsQuery)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderExecuteBundles : IEquatable<WGPUProcRenderPassEncoderExecuteBundles>
{
	public WGPUProcRenderPassEncoderExecuteBundles(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderExecuteBundles Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderExecuteBundles(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderExecuteBundles left, WGPUProcRenderPassEncoderExecuteBundles right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderExecuteBundles left, WGPUProcRenderPassEncoderExecuteBundles right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderExecuteBundles left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderExecuteBundles left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderExecuteBundles other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderExecuteBundles handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderExecuteBundles)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderInsertDebugMarker : IEquatable<WGPUProcRenderPassEncoderInsertDebugMarker>
{
	public WGPUProcRenderPassEncoderInsertDebugMarker(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderInsertDebugMarker Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderInsertDebugMarker(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderInsertDebugMarker left, WGPUProcRenderPassEncoderInsertDebugMarker right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderInsertDebugMarker left, WGPUProcRenderPassEncoderInsertDebugMarker right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderInsertDebugMarker left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderInsertDebugMarker left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderInsertDebugMarker other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderInsertDebugMarker handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderInsertDebugMarker)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderPopDebugGroup : IEquatable<WGPUProcRenderPassEncoderPopDebugGroup>
{
	public WGPUProcRenderPassEncoderPopDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderPopDebugGroup Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderPopDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderPopDebugGroup left, WGPUProcRenderPassEncoderPopDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderPopDebugGroup left, WGPUProcRenderPassEncoderPopDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderPopDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderPopDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderPopDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderPopDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderPopDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderPushDebugGroup : IEquatable<WGPUProcRenderPassEncoderPushDebugGroup>
{
	public WGPUProcRenderPassEncoderPushDebugGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderPushDebugGroup Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderPushDebugGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderPushDebugGroup left, WGPUProcRenderPassEncoderPushDebugGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderPushDebugGroup left, WGPUProcRenderPassEncoderPushDebugGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderPushDebugGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderPushDebugGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderPushDebugGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderPushDebugGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderPushDebugGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetBindGroup : IEquatable<WGPUProcRenderPassEncoderSetBindGroup>
{
	public WGPUProcRenderPassEncoderSetBindGroup(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetBindGroup Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetBindGroup(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetBindGroup left, WGPUProcRenderPassEncoderSetBindGroup right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetBindGroup left, WGPUProcRenderPassEncoderSetBindGroup right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetBindGroup left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetBindGroup left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetBindGroup other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetBindGroup handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetBindGroup)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetBlendConstant : IEquatable<WGPUProcRenderPassEncoderSetBlendConstant>
{
	public WGPUProcRenderPassEncoderSetBlendConstant(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetBlendConstant Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetBlendConstant(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetBlendConstant left, WGPUProcRenderPassEncoderSetBlendConstant right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetBlendConstant left, WGPUProcRenderPassEncoderSetBlendConstant right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetBlendConstant left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetBlendConstant left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetBlendConstant other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetBlendConstant handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetBlendConstant)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetIndexBuffer : IEquatable<WGPUProcRenderPassEncoderSetIndexBuffer>
{
	public WGPUProcRenderPassEncoderSetIndexBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetIndexBuffer Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetIndexBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetIndexBuffer left, WGPUProcRenderPassEncoderSetIndexBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetIndexBuffer left, WGPUProcRenderPassEncoderSetIndexBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetIndexBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetIndexBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetIndexBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetIndexBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetIndexBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetLabel : IEquatable<WGPUProcRenderPassEncoderSetLabel>
{
	public WGPUProcRenderPassEncoderSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetLabel Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetLabel left, WGPUProcRenderPassEncoderSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetLabel left, WGPUProcRenderPassEncoderSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetPipeline : IEquatable<WGPUProcRenderPassEncoderSetPipeline>
{
	public WGPUProcRenderPassEncoderSetPipeline(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetPipeline Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetPipeline(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetPipeline left, WGPUProcRenderPassEncoderSetPipeline right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetPipeline left, WGPUProcRenderPassEncoderSetPipeline right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetPipeline left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetPipeline left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetPipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetPipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetPipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetScissorRect : IEquatable<WGPUProcRenderPassEncoderSetScissorRect>
{
	public WGPUProcRenderPassEncoderSetScissorRect(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetScissorRect Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetScissorRect(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetScissorRect left, WGPUProcRenderPassEncoderSetScissorRect right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetScissorRect left, WGPUProcRenderPassEncoderSetScissorRect right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetScissorRect left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetScissorRect left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetScissorRect other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetScissorRect handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetScissorRect)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetStencilReference : IEquatable<WGPUProcRenderPassEncoderSetStencilReference>
{
	public WGPUProcRenderPassEncoderSetStencilReference(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetStencilReference Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetStencilReference(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetStencilReference left, WGPUProcRenderPassEncoderSetStencilReference right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetStencilReference left, WGPUProcRenderPassEncoderSetStencilReference right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetStencilReference left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetStencilReference left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetStencilReference other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetStencilReference handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetStencilReference)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetVertexBuffer : IEquatable<WGPUProcRenderPassEncoderSetVertexBuffer>
{
	public WGPUProcRenderPassEncoderSetVertexBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetVertexBuffer Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetVertexBuffer(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetVertexBuffer left, WGPUProcRenderPassEncoderSetVertexBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetVertexBuffer left, WGPUProcRenderPassEncoderSetVertexBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetVertexBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetVertexBuffer left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetVertexBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetVertexBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetVertexBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPassEncoderSetViewport : IEquatable<WGPUProcRenderPassEncoderSetViewport>
{
	public WGPUProcRenderPassEncoderSetViewport(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPassEncoderSetViewport Null => new(0);
	public static implicit operator WGPUProcRenderPassEncoderSetViewport(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPassEncoderSetViewport left, WGPUProcRenderPassEncoderSetViewport right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPassEncoderSetViewport left, WGPUProcRenderPassEncoderSetViewport right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPassEncoderSetViewport left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPassEncoderSetViewport left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPassEncoderSetViewport other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPassEncoderSetViewport handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPassEncoderSetViewport)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPipelineGetBindGroupLayout : IEquatable<WGPUProcRenderPipelineGetBindGroupLayout>
{
	public WGPUProcRenderPipelineGetBindGroupLayout(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPipelineGetBindGroupLayout Null => new(0);
	public static implicit operator WGPUProcRenderPipelineGetBindGroupLayout(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPipelineGetBindGroupLayout left, WGPUProcRenderPipelineGetBindGroupLayout right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPipelineGetBindGroupLayout left, WGPUProcRenderPipelineGetBindGroupLayout right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPipelineGetBindGroupLayout left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPipelineGetBindGroupLayout left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPipelineGetBindGroupLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPipelineGetBindGroupLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPipelineGetBindGroupLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcRenderPipelineSetLabel : IEquatable<WGPUProcRenderPipelineSetLabel>
{
	public WGPUProcRenderPipelineSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcRenderPipelineSetLabel Null => new(0);
	public static implicit operator WGPUProcRenderPipelineSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcRenderPipelineSetLabel left, WGPUProcRenderPipelineSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcRenderPipelineSetLabel left, WGPUProcRenderPipelineSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcRenderPipelineSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcRenderPipelineSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcRenderPipelineSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcRenderPipelineSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcRenderPipelineSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcSamplerSetLabel : IEquatable<WGPUProcSamplerSetLabel>
{
	public WGPUProcSamplerSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcSamplerSetLabel Null => new(0);
	public static implicit operator WGPUProcSamplerSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcSamplerSetLabel left, WGPUProcSamplerSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcSamplerSetLabel left, WGPUProcSamplerSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcSamplerSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcSamplerSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcSamplerSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcSamplerSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcSamplerSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcShaderModuleGetCompilationInfo : IEquatable<WGPUProcShaderModuleGetCompilationInfo>
{
	public WGPUProcShaderModuleGetCompilationInfo(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcShaderModuleGetCompilationInfo Null => new(0);
	public static implicit operator WGPUProcShaderModuleGetCompilationInfo(nint handle) => new(handle);
	public static bool operator ==(WGPUProcShaderModuleGetCompilationInfo left, WGPUProcShaderModuleGetCompilationInfo right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcShaderModuleGetCompilationInfo left, WGPUProcShaderModuleGetCompilationInfo right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcShaderModuleGetCompilationInfo left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcShaderModuleGetCompilationInfo left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcShaderModuleGetCompilationInfo other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcShaderModuleGetCompilationInfo handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcShaderModuleGetCompilationInfo)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcShaderModuleSetLabel : IEquatable<WGPUProcShaderModuleSetLabel>
{
	public WGPUProcShaderModuleSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcShaderModuleSetLabel Null => new(0);
	public static implicit operator WGPUProcShaderModuleSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcShaderModuleSetLabel left, WGPUProcShaderModuleSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcShaderModuleSetLabel left, WGPUProcShaderModuleSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcShaderModuleSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcShaderModuleSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcShaderModuleSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcShaderModuleSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcShaderModuleSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcSurfaceGetPreferredFormat : IEquatable<WGPUProcSurfaceGetPreferredFormat>
{
	public WGPUProcSurfaceGetPreferredFormat(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcSurfaceGetPreferredFormat Null => new(0);
	public static implicit operator WGPUProcSurfaceGetPreferredFormat(nint handle) => new(handle);
	public static bool operator ==(WGPUProcSurfaceGetPreferredFormat left, WGPUProcSurfaceGetPreferredFormat right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcSurfaceGetPreferredFormat left, WGPUProcSurfaceGetPreferredFormat right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcSurfaceGetPreferredFormat left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcSurfaceGetPreferredFormat left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcSurfaceGetPreferredFormat other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcSurfaceGetPreferredFormat handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcSurfaceGetPreferredFormat)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcSwapChainGetCurrentTextureView : IEquatable<WGPUProcSwapChainGetCurrentTextureView>
{
	public WGPUProcSwapChainGetCurrentTextureView(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcSwapChainGetCurrentTextureView Null => new(0);
	public static implicit operator WGPUProcSwapChainGetCurrentTextureView(nint handle) => new(handle);
	public static bool operator ==(WGPUProcSwapChainGetCurrentTextureView left, WGPUProcSwapChainGetCurrentTextureView right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcSwapChainGetCurrentTextureView left, WGPUProcSwapChainGetCurrentTextureView right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcSwapChainGetCurrentTextureView left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcSwapChainGetCurrentTextureView left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcSwapChainGetCurrentTextureView other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcSwapChainGetCurrentTextureView handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcSwapChainGetCurrentTextureView)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcSwapChainPresent : IEquatable<WGPUProcSwapChainPresent>
{
	public WGPUProcSwapChainPresent(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcSwapChainPresent Null => new(0);
	public static implicit operator WGPUProcSwapChainPresent(nint handle) => new(handle);
	public static bool operator ==(WGPUProcSwapChainPresent left, WGPUProcSwapChainPresent right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcSwapChainPresent left, WGPUProcSwapChainPresent right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcSwapChainPresent left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcSwapChainPresent left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcSwapChainPresent other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcSwapChainPresent handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcSwapChainPresent)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureCreateView : IEquatable<WGPUProcTextureCreateView>
{
	public WGPUProcTextureCreateView(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureCreateView Null => new(0);
	public static implicit operator WGPUProcTextureCreateView(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureCreateView left, WGPUProcTextureCreateView right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureCreateView left, WGPUProcTextureCreateView right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureCreateView left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureCreateView left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureCreateView other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureCreateView handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureCreateView)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureDestroy : IEquatable<WGPUProcTextureDestroy>
{
	public WGPUProcTextureDestroy(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureDestroy Null => new(0);
	public static implicit operator WGPUProcTextureDestroy(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureDestroy left, WGPUProcTextureDestroy right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureDestroy left, WGPUProcTextureDestroy right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureDestroy left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureDestroy left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureDestroy other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureDestroy handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureDestroy)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetDepthOrArrayLayers : IEquatable<WGPUProcTextureGetDepthOrArrayLayers>
{
	public WGPUProcTextureGetDepthOrArrayLayers(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetDepthOrArrayLayers Null => new(0);
	public static implicit operator WGPUProcTextureGetDepthOrArrayLayers(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetDepthOrArrayLayers left, WGPUProcTextureGetDepthOrArrayLayers right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetDepthOrArrayLayers left, WGPUProcTextureGetDepthOrArrayLayers right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetDepthOrArrayLayers left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetDepthOrArrayLayers left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetDepthOrArrayLayers other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetDepthOrArrayLayers handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetDepthOrArrayLayers)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetDimension : IEquatable<WGPUProcTextureGetDimension>
{
	public WGPUProcTextureGetDimension(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetDimension Null => new(0);
	public static implicit operator WGPUProcTextureGetDimension(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetDimension left, WGPUProcTextureGetDimension right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetDimension left, WGPUProcTextureGetDimension right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetDimension left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetDimension left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetDimension other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetDimension handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetDimension)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetFormat : IEquatable<WGPUProcTextureGetFormat>
{
	public WGPUProcTextureGetFormat(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetFormat Null => new(0);
	public static implicit operator WGPUProcTextureGetFormat(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetFormat left, WGPUProcTextureGetFormat right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetFormat left, WGPUProcTextureGetFormat right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetFormat left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetFormat left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetFormat other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetFormat handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetFormat)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetHeight : IEquatable<WGPUProcTextureGetHeight>
{
	public WGPUProcTextureGetHeight(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetHeight Null => new(0);
	public static implicit operator WGPUProcTextureGetHeight(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetHeight left, WGPUProcTextureGetHeight right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetHeight left, WGPUProcTextureGetHeight right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetHeight left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetHeight left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetHeight other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetHeight handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetHeight)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetMipLevelCount : IEquatable<WGPUProcTextureGetMipLevelCount>
{
	public WGPUProcTextureGetMipLevelCount(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetMipLevelCount Null => new(0);
	public static implicit operator WGPUProcTextureGetMipLevelCount(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetMipLevelCount left, WGPUProcTextureGetMipLevelCount right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetMipLevelCount left, WGPUProcTextureGetMipLevelCount right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetMipLevelCount left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetMipLevelCount left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetMipLevelCount other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetMipLevelCount handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetMipLevelCount)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetSampleCount : IEquatable<WGPUProcTextureGetSampleCount>
{
	public WGPUProcTextureGetSampleCount(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetSampleCount Null => new(0);
	public static implicit operator WGPUProcTextureGetSampleCount(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetSampleCount left, WGPUProcTextureGetSampleCount right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetSampleCount left, WGPUProcTextureGetSampleCount right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetSampleCount left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetSampleCount left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetSampleCount other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetSampleCount handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetSampleCount)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetUsage : IEquatable<WGPUProcTextureGetUsage>
{
	public WGPUProcTextureGetUsage(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetUsage Null => new(0);
	public static implicit operator WGPUProcTextureGetUsage(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetUsage left, WGPUProcTextureGetUsage right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetUsage left, WGPUProcTextureGetUsage right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetUsage left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetUsage left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetUsage other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetUsage handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetUsage)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureGetWidth : IEquatable<WGPUProcTextureGetWidth>
{
	public WGPUProcTextureGetWidth(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureGetWidth Null => new(0);
	public static implicit operator WGPUProcTextureGetWidth(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureGetWidth left, WGPUProcTextureGetWidth right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureGetWidth left, WGPUProcTextureGetWidth right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureGetWidth left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureGetWidth left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureGetWidth other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureGetWidth handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureGetWidth)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureSetLabel : IEquatable<WGPUProcTextureSetLabel>
{
	public WGPUProcTextureSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureSetLabel Null => new(0);
	public static implicit operator WGPUProcTextureSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureSetLabel left, WGPUProcTextureSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureSetLabel left, WGPUProcTextureSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureSetLabel)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct WGPUProcTextureViewSetLabel : IEquatable<WGPUProcTextureViewSetLabel>
{
	public WGPUProcTextureViewSetLabel(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static WGPUProcTextureViewSetLabel Null => new(0);
	public static implicit operator WGPUProcTextureViewSetLabel(nint handle) => new(handle);
	public static bool operator ==(WGPUProcTextureViewSetLabel left, WGPUProcTextureViewSetLabel right) => left.Handle == right.Handle;
	public static bool operator !=(WGPUProcTextureViewSetLabel left, WGPUProcTextureViewSetLabel right) => left.Handle != right.Handle;
	public static bool operator ==(WGPUProcTextureViewSetLabel left, nint right) => left.Handle == right;
	public static bool operator !=(WGPUProcTextureViewSetLabel left, nint right) => left.Handle != right;
	public bool Equals(WGPUProcTextureViewSetLabel other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is WGPUProcTextureViewSetLabel handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(WGPUProcTextureViewSetLabel)} [0x{Handle.ToString("X")}]";
}

